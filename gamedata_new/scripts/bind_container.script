-- -*- mode: lua; encoding: windows-1251 -*-
class "container_binder" (object_binder)

function container_binder:__init(obj)
	super (obj)
end

function container_binder:net_spawn(sobj)
	if not object_binder.net_spawn(self, sobj) then return false end

	local add_rad, add_weight = 0, 0

	local arts = this.get_container_arts(self.object)
	if arts then
		local cont_protection = sys_ini:r_float(self.object:section(), "rad_protection")
		local r
		for i, v in ipairs(arts) do
			if v.section ~= "_" then
				r = sys_ini:r_float(v.section, "radiation_restore_speed")*v.condition - cont_protection
				if r > 0 then
					add_rad = add_rad + r
				end
				add_weight = add_weight + sys_ini:r_float(sect, "inv_weight")
			end
		end
	end

	local item = self.object:get_inventory_item()
	if add_rad > 0 then
		item.radiation_restore_speed = item.radiation_restore_speed + add_rad
	end
	if add_weight > 0 then
		item.inv_weight = item.inv_weight + add_weight
	end

	return true
end

----------------------------------------------------------------------
function init(obj)
	local binder = container_binder(obj)
	obj:bind_object(binder)
end
----------------------------------------------------------------------

function get_container_arts(container)
	local ret = {}
	local se_cont = alife():object( container:id() )
	if se_cont then
		local ini = se_cont:spawn_ini()
		if ini and ini:section_exist("arts") then
			local res, indx, str, sect, cond
			for i = 0, ini:line_count("arts")-1 do
				res, indx, str = ini:r_line("arts", i, "", "")
				sect, cond = unpack( string.explode(str, ",", true) )
				ret[ tonumber(indx) ] = { section = sect, condition = cond or 1 }
			end
		end
	end

	if not next(ret) then
		local count = sys_ini:r_u32( container:section(), "container_slots" )
		for i = 1, count do
			ret[i] = { section = "_", condition = 1 }
		end
	end

	return ret
end

function set_container_arts(container, arts)
	local se_cont = alife():object( container:id() )
	if se_cont then
		local ini = se_cont:spawn_ini()
		ini.readonly = false
		if ini:section_exist("arts") then
			ini:remove_section("arts")
		end
		for i, v in ipairs(arts) do
			ini:w_string( "arts", tostring(i), string.format("%s,%s", v.section, v.condition) )
		end
		se_cont:save_spawn_ini()
		return true
	end
	return false
end

