-- -*- mode: lua; encoding: windows-1251 -*-

local get_wnd = level.main_input_receiver
local binds_actions = {}

-- фикс смены типа гранаты
local grenades = {
	"grenade_rgd5",
	"grenade_f1",
	"grenade_f1_double",
	"grenade_m61",
	"grenade_7643b",
	"grenade_he",
	"grenade_sg",
	"grenade_fb",
	"grenade_gd-05",
	"grenade_flash",
	"yadrena_bomba"
}
local sect2pos = {}
for i, v in ipairs(grenades) do
	sect2pos[v] = i
end

function switch_grenade()
	local a = db.actor
	if not a:alive() then return end
	if a:active_slot() ~= inventory_slots.GRENADE then return end

	local itm = a:item_in_slot( inventory_slots.GRENADE )
	if itm == nil then
		for k,v in pairs( grenades ) do
			itm = a:object(v)
			if itm then
				a:move_to_slot_and_activate( itm )
				break
			end
		end
		return
	end

	local sect = itm:section()
	local pos = sect2pos[sect]
	if not pos then
		log( "! %s:grenade_change : unregistered grenade section [%s]", script_name(), sect )
		table.insert( grenades, sect )
		pos = #grenades
		sect2pos[ sect ] = pos
	end

	local n = #grenades
	for i = pos, pos + n - 2 do
		local j = math.fmod( i, n ) + 1
		local gr = a:object( grenades[j] )
		if gr then
			a:move_to_ruck( itm )
			a:move_to_slot_and_activate( gr )
			break
		end
	end
end

function use_from_slot(n)
	if not db.actor:alive() then return end

	local slots = ui_inv_add.getSlots()
	local s = slots[n]
	if s then
		local item = db.actor:object(s)
		if item then
			db.actor:eat(item)
			show_use_item(s)
		end
	end
end

function show_use_item(section)
	local st = get_hud():AddCustomStatic( "item_used", true )
	st:wnd():SetText( "Использовано: "..game.translate_string( get_inv_name( section ) ) )
	st.m_endTime = time_global()/1000 + 4
end


-- Групповой перенос предметов в/из нычки/трупа
local carbody_addons, used_box
local reg_callbacks = {
	item_take = "on_item_take",
	item_drop = "on_item_drop"
}

function car_body_open()
	if used_box == nil then return end
	carbody_addons = CUICarbodyAddons(get_wnd(), used_box)
end

function car_body_close()
	if carbody_addons == nil then return end
	carbody_addons:Remove()
	carbody_addons = nil
	used_box = nil
end

function on_use(obj, who)
	if obj:clsid() == clsid.inventory_box or obj:alive() == false then
		used_box = obj
	end
end

function clear_used_box()
	used_box = nil
end
	
-------------------------
class "CUICarbodyAddons" (CUIScriptWnd)

function CUICarbodyAddons:__init(owner, used_box) super()
	self.owner = owner
	self.used_box = used_box
	self:InitControls()
	self:Show(true)
	for k,v in pairs(reg_callbacks) do
		xr_s.subscribe(k, self[v], {self = self} )
	end
end

function CUICarbodyAddons:InitControls()
	self:Init(0,0,1024,768)
	self:Enable(true)

	local xml = CScriptXmlInit()
	xml:ParseFile("carbody_addons.xml")
	self:Register(xml:Init3tButton("move_btn", self), "move_btn")
	self.owner:AttachChild(self)
	self:AddCallback("move_btn", ui_events.BUTTON_CLICKED, self.move_items, self)
	
	if self.used_box:clsid()==clsid.inventory_box then
		self:Register(xml:Init3tButton("repack_btn", self), "repack_btn")
		self:AddCallback("repack_btn", ui_events.BUTTON_CLICKED, self.repack_ammo, self)
	end
	
	self.DescrWnd = ui_inv_descr.CUIDescriptionWnd(self)
end

function CUICarbodyAddons:repack_ammo()
	dunin_ammo.repack_in_box(self.used_box)
end

function CUICarbodyAddons:Remove()
	self.DescrWnd:Remove()
	self.DescrWnd = nil
	self:ClearCallbacks()
	self.owner:DetachChild(self)
	for k,v in pairs(reg_callbacks) do
		xr_s.unsubscribe(k, self[v])
	end
	akill.check_habar_in_box1(used_box)
end

function CUICarbodyAddons:move_items()
	local box = self.used_box
	local actor = db.actor
	if self.droped_section then
		actor:iterate_inventory(function (dummy, item)
			if item:section() == self.droped_section then
				actor:transfer_item(item, box)
			end 
		end, nil)

	elseif self.taken_section then
		if box:clsid()==clsid.inventory_box then
			local item
			for i=0, box:inv_box_count()-1 do
				item = box:object_from_inv_box(i)
				if item:section() == self.taken_section then
					box:transfer_item(item, actor)
				end
			end
		else
			box:iterate_inventory(function (dummy, item)
				if item:section() == self.taken_section then
					box:transfer_item(item, actor)
				end 
			end, nil)
		end
	end

	self.droped_section = nil
	self.taken_section = nil
end

function CUICarbodyAddons:on_item_drop(obj)
	local s = obj:section()
	if s == "separator" then return end

	local sobj = alife():object(obj:id())
	if sobj and sobj.parent_id == 0 then return end

	self.droped_section = s
	self.taken_section = nil
end

function CUICarbodyAddons:on_item_take(obj)
	local s = obj:section()
	if s == "separator" then return end

	local outfit = db.actor:item_in_slot( inventory_slots.OUTFIT )
	if outfit and outfit:id() == obj:id() then return end

	self.taken_section = s
	self.droped_section = nil
end


-- Поломка и износ холодного оружия
local time_shift = time_global()
local wpn_power	= {
	['wpn_kuvalda']	= true,
	['wpn_crowbar']	= true,
	['wpn_topor']	= true,
	['wpn_machete'] = true,
	['wpn_kukri']	= true
}
function steel_arms()
	local actor = db.actor
	if not actor:alive() then return end
	if actor:active_slot() ~= inventory_slots.KNIFE then return end
	if time_shift > time_global() then return end
	
	if actor_active_item == nil then return end
	-- длительность анимации получить нельзя - будем считать "на глаз"
	time_shift = time_global() + 750
	
	local sec = actor_active_item:section()
	-- Усталость от махания железякой
	-- все ножи не проверяем, только самое тяжелое
	local dif = level.get_game_difficulty() + 1
	if wpn_power[sec] then
		actor.power = - dif * actor_active_item:get_weight() * 0.01
	end

	if level.get_target_dist() > sys_ini:r_float(sec, "fire_distance") + 0.1 then return end

	local d = sys_ini:r_float(sec, "condition_shot_dec")
	this.knife_deterioration(actor_active_item, dif * d)
end

function knife_deterioration(obj, dec)
	local cond = obj:condition() - dec
	obj:set_condition(cond)
--	log("# knife_deterioration: [%s] cond -> %s", obj:section(), cond)
	if cond < 0.04 then
		start_small_timer(200, function() kostya_dialog.remove_wpn(obj:id()) end)
	end
end

------------------------------
binds_actions[key_bindings.kWPN_FIRE] = hotkeys.steel_arms
binds_actions[key_bindings.kWPN_ZOOM] = hotkeys.steel_arms
binds_actions[key_bindings.kWPN_NEXT] = hotkeys.switch_grenade
binds_actions[key_bindings.kNIGHT_VISION] = function()
	if not db.actor:alive() then return end
	nightvision.switch_pnv()
end
binds_actions[key_bindings.kUSE_BANDAGE] = function() use_from_slot(2) end
binds_actions[key_bindings.kUSE_MEDKIT] = function() use_from_slot(1) end
binds_actions[key_bindings.kEXT_1] = function() use_from_slot(3) end
binds_actions[key_bindings.kCAM_4] = function() use_from_slot(4) end
binds_actions[key_bindings.kQUICK_SAVE] = function()
	u3_utils.on_quicksave()
end
binds_actions[key_bindings.kQUICK_LOAD] = function()
	u3_utils.load_quicksave()
end
binds_actions[key_bindings.kSCORES] = function()
	if not db.actor:alive() then return end
	if device():is_paused() then return end
	reminder.start_remind()
	if game_options.HudRad then
		arc_ui_dosimeter.show()
	end
end
binds_actions[key_bindings.kTORCH] = function()
	if not db.actor:alive() then return end
	if db.actor:item_in_slot( inventory_slots.TORCH ) then
		local snd = xr_sound.get_safe_sound_object("zwuk\\inv_torch")
		snd:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 0.7)
	end
end
-- runner/returner
binds_actions[key_bindings.kSKIN] = function ()
	if not db.actor:alive() then return end
	if inventory.on_belt("runner_tele") then
		fly.runner()
	else
		fly.returner()
	end
end
-- скриптовая консоль
binds_actions[key_bindings.kCHAT] = function() ui_console.show_console() end

function on_key(dik, bind)
	if get_wnd()~=nil then return end
	
	if binds_actions[bind] then
		binds_actions[bind]()
	end
end

function attach()
	xr_s.subscribe("car_body_open", this.car_body_open)
	xr_s.subscribe("car_body_close", this.car_body_close)
	xr_s.subscribe("key_press", this.on_key)
    xr_s.subscribe("npc_use", this.on_use)
end
