-- -*- mode: lua; encoding: windows-1251 -*-
local container_types = { 1, 3, 8 }

function show_menu(container)
	local wnd = level.main_input_receiver()
	if wnd then level.start_stop_menu(wnd, true) end

	local ui = arc_containers_menu(container)
	level.start_stop_menu(ui, true)
end


class "arc_containers_menu" (CUIScriptWnd)

function arc_containers_menu:__init(obj) super()
	db.actor:block_action(key_bindings.kQUIT)

	self.items_to_convert = {}
	self.artefacts = {}
	self.containers = {}
	self.containers_for_save = {}
	self.arts_weight = 0
	
	self:search_inventory()
	
	self.take_buttons = {}
	self.put_buttons = {}
	
	self:InitControls()

	local id = obj:id()
	for i, v in ipairs(self.containers) do
		if v.container:id() == id then
			self.container_index = i
			break
		end
	end

	self:FillContainer()
	self:FillRuck()

	xr_s.subscribe("item_take", self.OnItemTake, {self = self})

	self.DescrWnd = ui_inv_descr.CUIDescriptionWnd(self)

	self.wnd = self

	bind_stalker.hide_weapon("inv")
end

function arc_containers_menu:InitControls()
	self:Init(0, 0, 1024, 768)

	local xml = CScriptXmlInit()
	xml:ParseFile("ui_arc_container_menu.xml")

	local back = xml:InitFrame("frame", self)
	xml:InitStatic("art_box", back)

	local container = xml:InitStatic("container", back)
	self:Register(container, "container")
	self:AddCallbackEx("container", ui_events.STATIC_FOCUS_RECEIVED, self.OnBagFocus, "container")
	self:AddCallbackEx("container", ui_events.STATIC_FOCUS_LOST, self.OnBagFocusLost, "container")

	local st = xml:InitStatic("dragdrop_container_1", back)
	self.container_1 = ui_dragdrop_list.UIDragDropList( st:GetWidth(), st:GetHeight(), st:GetText() )
	st:AttachChild(self.container_1)
	self.container_1:Enable(false)
	self.container_1:Show(false)

	st = xml:InitStatic("dragdrop_container_3", back)
	self.container_3 = ui_dragdrop_list.UIDragDropList( st:GetWidth(), st:GetHeight(), st:GetText() )
	st:AttachChild(self.container_3)
	self.container_3:Enable(false)
	self.container_3:Show(false)

	st = xml:InitStatic("dragdrop_container_8", back)
	self.container_8 = ui_dragdrop_list.UIDragDropList( st:GetWidth(), st:GetHeight(), st:GetText() )
	st:AttachChild(self.container_8)
	self.container_8:Enable(false)
	self.container_8:Show(false)

	local bag = xml:InitStatic("dragdrop_bag", back)
	self:Register(bag, "bag")
	self:AddCallbackEx("bag", ui_events.STATIC_FOCUS_RECEIVED, self.OnBagFocus, "bag")
	self:AddCallbackEx("bag", ui_events.STATIC_FOCUS_LOST, self.OnBagFocusLost, "bag")
	self.our_bag = ui_dragdrop_list.UIDragDropList( bag:GetWidth(), bag:GetHeight(), bag:GetText() )
	bag:AttachChild(self.our_bag)
	self.our_bag:Show(true)

	self.weight_st = xml:InitStatic("arts_weight", back)

	local sh = #self.containers > 1

	self.btn_prev = xml:InitButton("btn_prev", back)
	self:Register(self.btn_prev, "btn_prev")
	self:AddCallback("btn_prev", ui_events.BUTTON_CLICKED, self.PrevContainer, self)
	self.btn_prev:Show(sh)

	self.btn_next = xml:InitButton("btn_next", back)
	self:Register(self.btn_next, "btn_next")
	self:AddCallback("btn_next", ui_events.BUTTON_CLICKED, self.NextContainer, self)
	self.btn_next:Show(sh)

	local btn = xml:InitButton("btn_quit", back)
	self:Register(btn, "btn_quit")
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.Quit, self)

	self.drag_item = ui_drag_item.UIDragItem()
	self:AttachChild(self.drag_item)
	self.drag_item:Show(false)
end

function arc_containers_menu:__finalize()
end

function arc_containers_menu:Update()
	CUIScriptWnd.Update(self)

	if self.move then
		self.drag_item:SetWndPos( self:GetMousePosX() + self.drag_item.shiftX, self:GetMousePosY() + self.drag_item.shiftY )
	end
	if self.first_click and self.first_click < time_global() then
		self.first_click = nil
	end
end

function arc_containers_menu:PrevContainer()
	self.container_index = self.container_index - 1
	if self.container_index < 1 then
		self.container_index = #self.containers
	end
	self:FillContainer()
end

function arc_containers_menu:NextContainer()
	self.container_index = self.container_index + 1
	if self.container_index > #self.containers then
		self.container_index = 1
	end
	self:FillContainer()
end

function arc_containers_menu:search_inventory()
	local section
	db.actor:iterate_inventory( function(dummy, item)
		section = item:section()
		if string.find(section, "arc_art_box_") then
			local t = {}
			t.container = item
			local a = arc_containers.get_container_arts(item)
			t.arts = {}
			for i, v in ipairs(a) do
				local art
				if v.s ~= "_" then
					art = fake_inventory_item.fake_item(v)
				else
					art = false
				end
				table.insert(t.arts, art)
			end
			table.insert(self.containers, t)
		elseif item:is_artefact() and bind_det_arts.is_detected_art(section) then
			table.insert(self.artefacts, item)
		end
	end,
	db.actor)
end

function arc_containers_menu:FillContainer()
	local t_arts = self.containers[self.container_index].arts
	self.container_slots = #t_arts
	self.current_dragdrop =  "container_"..self.container_slots
	self.cont_protection = sys_ini:r_float(v.container:section(), "rad_protection")

	for i, v in ipairs(container_types) do
		if self.container_slots ~= v then
			self["container_"..v]:Enable(false)
			self["container_"..v]:Show(false)
		end
	end

	local dragdrop = self[self.current_dragdrop]
	dragdrop:Enable(true)
	dragdrop:Show(true)
	self.arts_weight = 0
	for i, v in ipairs( t_arts ) do
		if v then
			local row = math.floor(i/dragdrop.rows_num)
			local col = (i - 1 - row*dragdrop.cols_num) % dragdrop.cols_num
			local itm = dragdrop:AddItemToCell(v, row, col)
			if itm then
				local nm = itm.name.."_c"..self.container_index
				self:Register(itm, nm)
				self:AddCallbackEx(nm, ui_events.STATIC_FOCUS_RECEIVED, self.OnCellItemFocus, self.current_dragdrop, itm.name)
				self:AddCallbackEx(nm, ui_events.STATIC_FOCUS_LOST, self.OnCellItemFocusLost, self.current_dragdrop, itm.name)
			end
			self.arts_weight = self.arts_weight + v:get_weight()
		end
	end

	self:ShowArtsWeight()
end

function arc_containers_menu:FillRuck()
	for i, v in ipairs(self.artefacts) do
		local itm = self.our_bag:AddItem(v)
		if itm then
			local nm = itm.name.."_r"
			self:Register(itm, nm)
			self:AddCallbackEx(nm, ui_events.STATIC_FOCUS_RECEIVED, self.OnCellItemFocus, "our_bag", itm.name)
			self:AddCallbackEx(nm, ui_events.STATIC_FOCUS_LOST, self.OnCellItemFocusLost, "our_bag", itm.name)
		end
	end
end

function arc_containers_menu:ShowArtsWeight()
	self.weight_st:SetText( string.format("Вес артефактов: %.2f кг", self.arts_weight) )
end

function arc_containers_menu:OnCellItemFocus(from_where, item_name)
	self.item_in_focus = item_name

	local bag = self[from_where]
	local itm = bag:GetItem(item_name)
	if itm then
		xr_s.on_event("cell_item_focus", itm:GetTopItem())
	end
end
function arc_containers_menu:OnCellItemFocusLost(from_where, item_name)
	if self.item_in_focus == item_name then
		self.item_in_focus = nil
	end

	local bag = self[from_where]
	local itm = bag:GetItem(item_name)
	if itm then
		xr_s.on_event("cell_item_focus_lost", itm:GetTopItem())
	end
end

function arc_containers_menu:OnBagFocus(bag)
	self.bag_in_focus = bag
end
function arc_containers_menu:OnBagFocusLost(bag)
	if self.bag_in_focus == bag then
		self.bag_in_focus = nil
	end
end

function arc_containers_menu:TransferItem(from_where, to_where, item_name, pos)
	local bag_from = self[from_where]
	local itm = bag_from:GetItem(item_name)
	if not itm then return end

	self.containers_for_save[self.container_index] = true

	local item = itm:GetTopItem()
	local bag_to = self[to_where]

	local mul = 0
	local add_rad = 0
	local item_rad = sys_ini:r_float(item:section(), "radiation_restore_speed")
	if item_rad > self.cont_protection then
		add_rad = item_rad - self.cont_protection
	end
	local add_weight = item:get_weight()


	local t_cont = self.containers[self.container_index]

	if item.is_fake then	-- перемещаем из контейнера в рюкзак
		for i, v in ipairs(t_cont.arts) do
			if v and v:id() == item:id() then
				t_cont.arts[i] = false
				break
			end
		end
		
		self:ConvertFakeItem(item)
		self.arts_weight = self.arts_weight - add_weight
		bag_from:RemoveItem( item )

		mul = -1
	else		-- из рюкзака в контейнер
		local obj = fake_inventory_item.fake_item(item)
		for i, v in ipairs(t_cont.arts) do
			if not v then
				t_cont.arts[i] = obj
				break
			end
		end
		for i, v in ipairs(self.artefacts) do
			if v:id() == item:id() then
				table.remove(self.artefacts, i)
				break
			end
		end

		local new_itm = bag_to:AddItem(obj)
		if new_itm then
			local nm = new_itm.name.."_c"..self.container_index
			self:Register(new_itm, nm)
			self:AddCallbackEx(nm, ui_events.STATIC_FOCUS_RECEIVED, self.OnCellItemFocus, "others_bag", new_itm.name)
			self:AddCallbackEx(nm, ui_events.STATIC_FOCUS_LOST, self.OnCellItemFocusLost, "others_bag", new_itm.name)
		end
		self.arts_weight = self.arts_weight + add_weight

		self.our_bag:RemoveItem( item )

		shiftCheckDropItem()
		alife():release( alife():object( item:id() ), true )

		mul = 1
	end

	arc_containers.change_container_params(t_cont.container, add_rad*mul, add_weight*mul)

	self:ShowArtsWeight()
end

function arc_containers_menu:ConvertFakeItem(item)
	local sect = item:section()
	local sobj = alife():create(sect, vector():set(0,0,0), 0, 0, 0)

	item:set_server_object(sobj)

	self.items_to_convert[sobj.id] = item:condition()

	item:destroy()
end

function arc_containers_menu:OnItemTake(item)
	local cond = self.items_to_convert[item:id()]
	if cond == nil then return end

	if cond<1 then
		item:set_condition(cond)
	end

	table.insert(self.artefacts, item)
	local itm = self.our_bag:AddItem(item)
	if itm then
		local nm = itm.name.."_r"
		self:Register(itm, nm)
		self:AddCallbackEx(nm, ui_events.STATIC_FOCUS_RECEIVED, self.OnCellItemFocus, "our_bag", itm.name)
		self:AddCallbackEx(nm, ui_events.STATIC_FOCUS_LOST, self.OnCellItemFocusLost, "our_bag", itm.name)
	end

	self.items_to_convert[item:id()] = nil
end

function SaveContainers()
	for idx in pairs(self.containers_for_save) do
		local t = self.containers[idx]
		arc_containers.set_container_arts(t.container, t.arts)
		for i, v in ipairs(t.arts) do
			v:destroy()
		end
	end
end

function arc_containers_menu:Quit()
	db.actor:unblock_action(key_bindings.kQUIT)

	for i, v in ipairs(container_types) do
		self["container_"..v]:Destroy()
		self["container_"..v] = nil
	end
	self.our_bag:Destroy()
	self.our_bag = nil
	self.drag_item = nil
	self.DescrWnd:Remove()
	self.DescrWnd = nil

	self:SaveContainers()

	self.items_to_convert = nil
	self.artefacts = nil
	self.containers = nil

	xr_s.unsubscribe("item_take", self.OnItemTake)

	self:ClearCallbacks()
	self:GetHolder():start_stop_menu(self,true)
	self.wnd = nil

	bind_stalker.restore_weapon("inv")
end

function arc_containers_menu:OnKeyboard(dik, keyboard_action)
	CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		if dik_to_bind(dik) == key_bindings.kQUIT then
			self:Quit()
		end
	end

	if dik ~= DIK_keys.DIK_LMOUSE then
		return true
	end

	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		if self.item_in_focus and self.bag_in_focus then
			self.selected_item = self.item_in_focus
			self.item_owner = self.bag_in_focus

			local bag = self[self.item_owner]
			local itm = bag:GetItem(self.selected_item)
			if itm then
				self.drag_item:InitItem( itm:GetTopItem() )
				local r = itm:GetAbsoluteRect()
				self.drag_item.shiftX = r.x1 - self:GetMousePosX()
				self.drag_item.shiftY = r.y1 - self:GetMousePosY()
				self.drag_item:Init( r.x1, r.y1, itm:GetWidth(), itm:GetHeight() )
				self.drag_item:Show(true)

				self.move = true
			end
		end
		if self.first_click == nil then
			self.first_click = time_global() + db_click_timeout
		else
			if self.first_click > time_global() then
				if self.item_in_focus then
					local to = (self.current_dragdrop == self.bag_in_focus) and "our_bag" or self.current_dragdrop
					self:TransferItem(
						self.bag_in_focus,
						to,
						self.item_in_focus
					)
				end
				self.first_click = time_global() + db_click_timeout
			else
				self.first_click = nil
			end
		end
	elseif keyboard_action == ui_events.WINDOW_KEY_RELEASED then
		if self.move then
			self.move = false
			if self.drag_item:IsShown() then
				self.drag_item:Show(false)
			end
		end

		if self.selected_item and self.bag_in_focus then
			local cell = self[self.current_dragdrop]:GetFocusedCell()
			
			if self.item_owner ~= self.bag_in_focus then
				local pos
				if cell then
					pos = {cell.row, cell.col}
				end
				self:TransferItem(
					self.item_owner,
					self.bag_in_focus,
					self.selected_item,
					pos
				)
			elseif self.bag_in_focus == self.current_dragdrop then
				if cell then
					self[self.current_dragdrop]:ReplaceItem(self.selected_item)
				end
			end
		end
		self.selected_item = nil
		self.item_owner = nil
	end
	
	return true
end
