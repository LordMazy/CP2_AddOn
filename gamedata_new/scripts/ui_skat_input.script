-- -*- mode: lua; encoding: windows-1251 -*-
local _wnd = nil

function change_info(str)
	local info = "skat_"..str.."_on"
	if has_alife_info(info) then
		db.actor:disable_info_portion(info)
	else
		db.actor:give_info_portion(info)
	end
end

class "UISkatInputPanel" (CUIScriptWnd)

local params = {
	['exo_mil_exoskeleton_add'] = {
		health = true,
		rad = false,
		power = false,
		psy = false
	},
	['exo_mil_exoskeleton_addr'] = {
		health = true,
		rad = true,
		power = false,
		psy = false
	},
	['exo_mil_exoskeleton_addrs'] = {
		health = true,
		rad = true,
		power = true,
		psy = true
	}
}
local texts = {
	health = 'Система регенерации здоровья',
	rad = 'Антирадиационная защита',
	power = 'Система восстановления сил',
	psy = 'Защита мозговой деятельности'
}
local reg_callbacks = {
	item_drop = "check_armor",
	item_to_slot = "on_slot",
	item_to_ruck = "check_armor"
}
	
function UISkatInputPanel:__init( st, section )
	super()

	self.sect = section
	
	for k, v in pairs( reg_callbacks ) do
		xr_s.subscribe( k, this[v] )
	end
	
	self:Init(0, 0, 1024, 768)
	self:SetAutoDelete( true )
	
	self.frame = CUIFrameWindow()
	self.frame:SetAutoDelete( true )
	self.frame:Init( "ui_icons_PDA_dialog_frame", 0, 0, 200, 150 )
	st:AttachChild( self.frame )
	
	local btn = CUIButton()
	btn:SetAutoDelete( true )
	local w = 17*kScreen
	btn:Init( "ui_PDA_checker_t", self.frame:GetWidth()-w-4, 4, w, 17 )
	btn:SetStretchTexture( true )
	self.frame:AttachChild( btn )
	self:Register( btn, "btn_quit" )
	self:AddCallback( "btn_quit", ui_events.BUTTON_CLICKED, self.Hide, self )

	local step, n = 25, 0
	for k, v in pairs( params[section] ) do
		local b = CUICheckButton()
		self["check_"..k] = b
		b:SetAutoDelete(true)
		b:Init( "ui_PDA_checker", 15, 25+n*step, 90, 20 )
		b:SetText( texts[k] )
		b:SetTextColor( 255, 216, 186, 140 )
		self.frame:AttachChild( b )
		self:Register( b, "check_"..k )
		self:AddCallback( "check_"..k, ui_events.BUTTON_CLICKED, ui_skat_input.change_info, k )
		b:SetCheck( v and has_alife_info("skat_"..k.."_on") )
		b:Enable( v )
		n = n + 1
	end
	
	self:ShowWnd()
	
	_wnd = self
end

function UISkatInputPanel:CheckWnd(section)
	if self.sect ~= section then
		self.sect = section
		local t = params[section]
		local nm
		for k, v in pairs(t) do
			nm = 'check_'..k
			self[nm]:SetCheck( v and has_alife_info("skat_"..k.."_on") )
			self[nm]:Enable( v )
		end
	end
end

function UISkatInputPanel:ShowWnd()
	if self.frame:IsShown() then return end
	local owner = level.main_input_receiver()
	self.frame:SetWndPos(
		math.min( owner:GetCursorX(), 1024-self.frame:GetWidth() ),
		math.min( owner:GetCursorY(), 768-self.frame:GetHeight() )
	)
	self.frame:Show( true )
end

function UISkatInputPanel:Hide()
	self.frame:Show( false )
end

function UISkatInputPanel:Remove()
	for k, v in pairs( reg_callbacks ) do
		xr_s.unsubscribe( k, this[v] )
	end
	self:ClearCallbacks()
	_wnd = nil
end

function check_armor(item)
	if params[item:section()] then
		_wnd:Hide()
	end
end

function on_slot(item)
	if params[item:section()]==nil then
		_wnd:Hide()
	else
		_wnd:CheckWnd( item:section() )
	end
end
