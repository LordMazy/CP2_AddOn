-- -*- mode: lua; encoding: windows-1251 -*-
--/amk_rel_1/
-- File:        UI_MAIN_MENU.SCRIPT
-- Description: Load Dialog for STALKER
-- Created:     28.10.2004
-- Lasd edit:	18.01.2006
-- Copyright:   2004 GSC Game World
-- Author:      Serhiy Vynnychenko (narrator@gsc-game.kiev.ua)
-- Version:     0.9

class "main_menu" (CUIScriptWnd)

function main_menu:__init() super()
	local loaded = level.present()

	if ( not loaded ) and string.find( command_line(), "-load_last_save", 1, true ) then
		get_console():execute ("load_last_save")
		return
	end

	self.game_is_on = loaded and ( (db.actor and db.actor:alive())
	self.mbox_mode = 0
	self:InitControls()
	self:InitCallBacks()
end

function main_menu:__finalize() end

function main_menu:InitControls()
	self:Init(0,0,1024,768)			  
    local xml = CScriptXmlInit()
    xml:ParseFile("ui_mm_main.xml")
     
    xml:InitStatic("back_movie", self)
    xml:InitStatic("fire_movie", self)
    xml:InitStatic("background", self)
    self.shniaga = xml:InitMMShniaga("shniaga_wnd",self);
	
	self.message_box = CUIMessageBoxEx()
	self:Register(self.message_box, "msg_box")	
	
	local _ver = xml:InitStatic("static_version",self)
	local mm = _G.main_menu.get_main_menu()
	_ver:SetText( mm:GetGSVer() )
	_ver = xml:InitStatic("mod_version",self)
	_ver:SetText( meceniy_utils.read_mod_ver() )
end

function main_menu:Show(f)
	self.shniaga:SetVisibleMagnifier(f)
end

function main_menu:InitCallBacks()
	-- new game
	self:AddCallbackEx("btn_novice",		ui_events.BUTTON_CLICKED,				self.OnButton_new_novice_game)
	self:AddCallbackEx("btn_stalker",		ui_events.BUTTON_CLICKED,				self.OnButton_new_stalker_game)
	self:AddCallbackEx("btn_veteran",		ui_events.BUTTON_CLICKED,				self.OnButton_new_veteran_game)
	self:AddCallbackEx("btn_master",		ui_events.BUTTON_CLICKED,				self.OnButton_new_master_game)
	-- options																											
	self:AddCallbackEx("btn_options",		ui_events.BUTTON_CLICKED,				self.OnButton_options_clicked)
	-- load																												
	self:AddCallbackEx("btn_load",			ui_events.BUTTON_CLICKED,				self.OnButton_load_clicked)
	-- save																												
	self:AddCallbackEx("btn_save",			ui_events.BUTTON_CLICKED,				self.OnButton_save_clicked)
	self:AddCallbackEx("btn_save_level",	ui_events.BUTTON_CLICKED,				self.OnButton_save_level_clicked)
	-- quit																												
	self:AddCallbackEx("btn_quit",			ui_events.BUTTON_CLICKED,				self.OnButton_quit_clicked)
	self:AddCallbackEx("btn_quit_to_mm",	ui_events.BUTTON_CLICKED,				self.OnButton_disconnect_clicked)
	self:AddCallbackEx("btn_ret",			ui_events.BUTTON_CLICKED,				self.OnButton_return_game)
	self:AddCallbackEx("btn_lastsave",		ui_events.BUTTON_CLICKED,				self.OnButton_last_save)
	self:AddCallbackEx("btn_credits",		ui_events.BUTTON_CLICKED,				self.OnButton_credits_clicked)
	-- message box																										
	self:AddCallbackEx("msg_box",			ui_events.MESSAGE_BOX_OK_CLICKED,		self.OnMsgOk)
	self:AddCallbackEx("msg_box",			ui_events.MESSAGE_BOX_CANCEL_CLICKED,	self.OnMsgCancel)
	self:AddCallbackEx("msg_box",			ui_events.MESSAGE_BOX_YES_CLICKED,		self.OnMsgYes)
	self:AddCallbackEx("msg_box",			ui_events.MESSAGE_BOX_NO_CLICKED,		self.OnMsgNo)
	self:AddCallbackEx("msg_box",			ui_events.MESSAGE_BOX_QUIT_GAME_CLICKED,self.OnMessageQuitGame)
	self:AddCallbackEx("msg_box",			ui_events.MESSAGE_BOX_QUIT_WIN_CLICKED,	self.OnMessageQuitWin)
end

function main_menu:OnMsgOk()
	self.mbox_mode = 0
end

function main_menu:OnMsgCancel()
	self.mbox_mode = 0
end

function main_menu:OnMsgYes()
	if self.mbox_mode == 1 then
		self:LoadLastSave()
	end

	self.mbox_mode = 0
end

function main_menu:OnMsgNo()
	self.mbox_mode = 0
end

function main_menu:LoadLastSave()
	ui_mm_opt_add.check_options()
	
	local console = get_console()
	console:execute ("main_menu off")
	console:execute ("load_last_save")
end

function main_menu:OnButton_last_save()
	if not alife() or not db.actor or not db.actor:alive() then
		self:LoadLastSave()
		return
	end
	
	self.mbox_mode			= 1
	self.message_box:Init	("message_box_confirm_load_save")
	self:GetHolder():start_stop_menu(self.message_box, true)
end

function main_menu:OnButton_credits_clicked()
	if getFS():exist("$game_saves$", "credits.ltx") ~= nil then 
		game.start_tutorial("credits_seq")
	end
end

function main_menu:OnButton_quit_clicked()
	self.message_box:Init("message_box_quit_windows")
	self:GetHolder():start_stop_menu(self.message_box, true)
end


function main_menu:OnButton_disconnect_clicked()
	self.message_box:Init("message_box_quit_game")
	self.message_box:SetText("ui_mm_quit_game_message")
	self:GetHolder():start_stop_menu(self.message_box, true)
end

function main_menu:OnMessageQuitGame()
	get_console():execute("disconnect")
end

function main_menu:OnMessageQuitWin()
	archievements.save_gametime()
	ui_mm_opt_add.check_options()
	new_intro.rewrite()
	get_console():execute("quit")
end

function main_menu:OnButton_return_game()
	ui_mm_opt_add.check_options()
	self:ReturnToGame()
	archievements.mm_opt()
	ui_mm_opt_add.buy_quest_item()
end

function main_menu:OnButton_new_novice_game()
	local console = get_console()
	console:execute("g_game_difficulty gd_novice")
	self:StartGame()	
end

function main_menu:OnButton_new_stalker_game()
	local console = get_console()
	console:execute("g_game_difficulty gd_stalker")
	self:StartGame()
end

function main_menu:OnButton_new_veteran_game()
	local console = get_console()
	console:execute("g_game_difficulty gd_veteran")
	self:StartGame()
end

function main_menu:OnButton_new_master_game()
	local console = get_console()
	console:execute("g_game_difficulty gd_master")
	self:StartGame()
end

function main_menu:StartGame()
	ui_mm_opt_add.check_options()

	local console = get_console()
	
	if (alife() ~= nil) then
		console:execute	("disconnect")	
	end
	
	console:execute("start server(all/single/alife/new) client(localhost)")
	console:execute("main_menu off")
	archievements.on_new_game()
end

function main_menu:OnButton_save_clicked()
-- переделано на локальное определение для освобождения памяти при выходе из меню
	local save_dlg = ui_save_dialog.save_dialog()
	save_dlg.owner = self
	
	self:GetHolder():start_stop_menu(save_dlg, true)
	self:GetHolder():start_stop_menu(self, true) --new
	self:Show(false)
end

function main_menu:OnButton_options_clicked()
	if self.opt_dlg == nil then
		self.opt_dlg = ui_mm_opt_main.options_dialog()
		self.opt_dlg.owner = self
	end

	self:GetHolder():start_stop_menu(self.opt_dlg, true)
	self:Show(false)
end

function main_menu:OnButton_load_clicked()
-- переделано на локальное определение для освобождения памяти при выходе из меню
	local load_dlg = ui_load_dialog.load_dialog()
	load_dlg.owner = self
	
	self:GetHolder():start_stop_menu(load_dlg, true)
	self:GetHolder():start_stop_menu(self, true) --new
	self:Show(false)
end

function main_menu:ReturnToGame()
	self:ClearCallbacks()

	local childs = {"opt_dlg", "cheat_dlg", "naxac_dlg", "spawn_menu", "info_menu"}
	for i, v in ipairs(childs) do
		if self[v] then
			self[v]:ClearCallbacksEx()
			self[v] = nil
		end
	end
	
	get_console():execute("main_menu off")
end

function main_menu:OnButton_save_level_clicked()
	ui_mm_opt_add.check_options()
	self:ReturnToGame()
    u3_utils.savegame_on_level()
	archievements.mm_opt()
end

function main_menu:Dispatch(cmd, param)  --virtual function
	return true
end

function main_menu:OnKeyboard(dik, keyboard_action)  --virtual function
	CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	
	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then

		if dik == DIK_keys.DIK_ESCAPE then
			if self.game_is_on then
				ui_mm_opt_add.check_options()
				self:ReturnToGame()
				archievements.mm_opt()
				ui_mm_opt_add.buy_quest_item()
			end
			
		elseif dik == DIK_keys.DIK_S then
			if self.game_is_on then
				self:OnButton_save_level_clicked()
			end
		elseif dik == DIK_keys.DIK_F3 then
			_G["naxac_test"] = nil
			naxac_test.ggg()
		elseif dik == DIK_keys.DIK_F1 then
			cheat_main.start_menu(self)
		elseif dik == DIK_keys.DIK_L then
			self:OnButton_last_save()
		elseif 	dik == DIK_keys.DIK_Q then
			self:OnMessageQuitWin()
		elseif dik == DIK_keys.DIK_F4 then
			if self.game_is_on then
				self:show_position_informer_window()
			end
		end
		
	end
   
	return true
end

function main_menu:show_position_informer_window()
	if self.cheat_dlg == nil then
		self.cheat_dlg = positioninformer.pi()
		self.cheat_dlg.owner = self
	end
	self:GetHolder():start_stop_menu(self.cheat_dlg, true)
	self:GetHolder():start_stop_menu(self, true)
	self:Show(true)
end
