-- -*- mode: lua; encoding: windows-1251 -*-
local type2box = {
	yes_no_info		= "message_box_buy_spawn",
	yes_no_alarm	= "message_box_change_level",
	yes_no_red		= "message_box_delete_file_name",
	ok_info			= "msg_box_no_new_patch",
	ok_alarm		= "message_box_invalid_saved_game",
	ok_red			= "message_box_invalid_host"
}

class "UIMessageBox" ( CUIScriptWnd )

function UIMessageBox:__init( type, text, func_yes, func_no )
	super()

	self:Init( 0, 0, 1024, 768 )
	
	self.quit_dik = bind_to_dik( key_bindings.kQUIT )
	get_console():execute( "unbind quit" )

	self.box_name = type2box[ type or "ok_info" ]
	self.text = text
	
	self.message_box = CUIMessageBoxEx()
	self:Register( self.message_box, "message_box" )

	if string.find( type, "^ok_" ) then
		self.OnMsgOk = function( wnd, func )
			if func then func() end
			wnd:OnQuit()
		end
		self:AddCallbackEx( "message_box", ui_events.MESSAGE_BOX_OK_CLICKED, self.OnMsgOk, self, func_yes )
	else
		self.OnMsgYes = function( wnd, func )
			if func then func() end
			wnd:OnQuit()
		end
		self.OnMsgNo = function( wnd, func )
			if func then func() end
			wnd:OnQuit()
		end
		self:AddCallbackEx( "message_box", ui_events.MESSAGE_BOX_YES_CLICKED, self.OnMsgYes, self, func_yes )
		self:AddCallbackEx( "message_box", ui_events.MESSAGE_BOX_NO_CLICKED,  self.OnMsgNo,  self, func_no  )
	end

	self.dlg = self
	level.start_stop_menu( self, true )

	-- start_small_timer( 300, self.ShowMessageBox, self )
	xr_s.subscribe( "update", self.ShowMessageBox, { timeout = 300, self = self, once = true } )
end

function UIMessageBox:__finalize() end

function UIMessageBox:ShowMessageBox()
	self.message_box:Init( self.box_name )
	self.message_box:SetText( self.text )
	self:GetHolder():start_stop_menu( self.message_box, true )
end

function UIMessageBox:OnQuit()
	local key = dik_to_keyname( self.quit_dik )
	get_console():execute( "bind quit "..string.lower( key ) )

	self:ClearCallbacks()
	self:GetHolder():start_stop_menu( self, true )
	self.dlg = nil
end
