-- -*- mode: lua; encoding: windows-1251 -*-
local rad_zones = {}
local attenuation = sys_ini:r_float("zone_radioactive", "attenuation")

function bind(obj)
	obj:bind_object(rad_binder(obj))
end

class "rad_binder" (object_binder)

function rad_binder:__init(obj) super(obj)
end

function rad_binder:net_spawn(data)
    if not object_binder.net_spawn(self, data) then
        return false
    end
	
	if alife():object( self.object:id() ) ~= nil then
		rad_zones[self.object:id()] = naxac_netpk.get_all_shapes_data( self.object )
	end
	
    return true
end

function rad_binder:net_destroy()
	rad_zones[self.object:id()] = nil
	object_binder.net_destroy(self)
end
	
----------------------------------------------------------------
function get_anoms_radiation()
	local ret = 0
	local apos = db.actor:position()
	local d1, d2, n
	for id, data in pairs(rad_zones) do
		d1 = naxac_netpk.distance_from_zone_boundary( data, apos )
		if d1 >= 0 then	-- inside
			d2 = apos:distance_to( data.sobj.position )
			n = 1 - attenuation * ( d2 / (d2 + d1) )^2
			ret = ret + data.max_power * math.max( n, 0 )
		end
	end
	return ret
end
