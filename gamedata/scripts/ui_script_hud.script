-- -*- mode: lua; encoding: windows-1251 -*-
-- Options
local show_corpse = game_options.ScriptMapShowDeadbody
local show_enemy = game_options.ScriptMapShowEnemy
local show_monsters = game_options.ScriptMapShowMonsters

local dev = device()
local wnd = nil

local map_zoom = 2
local map_dist_sqr = ( 150/map_zoom )^2

---------------------------------------------------------------------------
class "UIScriptHUD" (CUIWindow)

function UIScriptHUD:__init()
	super()

	self:Init(0, 0, 1024, 768)

	local xml = CScriptXmlInit()
	xml:ParseFile("ui_script_hud.xml")

	local ini = ini_file( "game_maps_single.ltx" )
	local level_name = level.name()
	local map_texture = ini:r_string_ex(level_name, "texture", "ui\\ui_nomap2")
	local tmp = ini:r_string_ex(level_name, "bound_rect", nil)
	if tmp then
		tmp = string.explode(tmp, ",", true)
	else
		tmp = {10000, 10000, -10000, -10000}
	end
--	local r = get_bound_rect()
	self.bound_rect = Frect():set( unpack(tmp) )
--	self.bound_rect = r
--	log("bound_rect:      [%s::%s::%s::%s]", r.x1, r.y1, r.x2, r.y2)
--	log("bound_rect ini:  [%s::%s::%s::%s]", tmp[1], tmp[2], tmp[3], tmp[4])
--	self.global_rect = Frect():set( unpack( ini:r_list(level_name, "global_rect") ) )

	self.map_frame = xml:InitStatic("level_frame", self)
	self.map_frame:ClipperOn()
	self.clip_center = vector2():set( self.map_frame:GetWidth()/2, self.map_frame:GetHeight()/2 )

	self.map = xml:InitStatic("level_map", self.map_frame)
	local w = self.bound_rect:width() *map_zoom
	local h = self.bound_rect:height() *map_zoom
	self.map:SetWndRect( 0, 0, w, h )
	self.map:InitTexture(map_texture)
	self.map_center = vector2():set( w/2, h/2 )

	local st = xml:InitStatic("minimap_center", self.map_frame)
	st:SetWndPos(
		self.clip_center.x - st:GetWidth()/2,
		self.clip_center.y - st:GetHeight()/2
	)

	self.map_spots = {}
	self.spot_offset = vector2():set(1.5, 1.5)

	xml:InitStatic("background", self)

	self.body_state = xml:InitStatic("body_state", self)

	st = xml:InitStatic("static_power", self)
	self.progress_power = xml:InitProgressBar("power_progress", st)

--	self.progress_luminosity = xml:InitProgressBar("luminosity_progress", st)
--	self.progress_noise = xml:InitProgressBar("noise_progress", st)

	st = xml:InitStatic("static_health", self)
	self.progress_health = xml:InitProgressBar("progress_bar_health", st)

	st = xml:InitStatic("static_armor", self)
	self.progress_armor = xml:InitProgressBar("progress_bar_armor", st)
	
	st = xml:InitStatic("static_radiation", self)
	self.progress_radiation = xml:InitProgressBar("progress_bar_radiation", st)

	self.time_static = xml:InitStatic("time_static", self)

	xr_s.subscribe("update", self.Update, {self = self})
	self.need_update = false
end

function UIScriptHUD:__finalize()
end

function UIScriptHUD:Update(delta)
	if not self.need_update then return end

	self:UpdateIndicators()
	self:UpdateMap()
end

function UIScriptHUD:UpdateIndicators()
	local tex = "ui_hud_soldier_"..get_body_state_texture()
	self.body_state:InitTexture(tex)

	self.progress_power:SetProgressPos( Actor.power * 100 )
	self.progress_health:SetProgressPos( Actor.health * 100 )
	if arc_inventory.IsRadDetected() then
		self.progress_radiation:SetProgressPos( 100 * arc_radiation.RAD_DOSE / arc_radiation.DOSE_DEADLY )
	end
	if Actor:get_current_outfit() then
		self.progress_armor:SetProgressPos( Actor:get_current_outfit():condition() * 100 )
	end

	self.time_static:SetText( string.format( "%02d:%02d", level.get_time_hours(), level.get_time_minutes() ) )
end

function UIScriptHUD:UpdateMap()
	self.dir = -dev.cam_dir:getH()

	-- Update map position
	self.map:SetHeading(self.dir)
	local pos = self:ConvertRealToLocal( Actor:position() )
	local new_pos = vector2()
	new_pos:sub(pos)
	new_pos:add(self.clip_center)
	self.map:SetWndPos( new_pos:get() )
	-- log("pos: %s, %s", pos:get())
	-- log("dir: %s", self.dir)
	-- log("map pos: %s, %s", new_pos:get())
--	self.map:SetTextureOffset( new_pos.x*math.cos(self.dir), 0 )

	-- Update map spots
	local del = {}
	local st
	for id, obj in pairs(db.creatures) do
		st = self.map_spots[id]
		if AI:object(id)
			and obj:position():distance_to_sqr( Actor:position() ) < map_dist_sqr
		then
			if not st then
				self.map_spots[id] = self:DrawSpot(obj)
			else
				local clr = get_point_color(obj)
				if clr then
					st:SetWndPos( self:ConvertRealToLocal( obj:position() ):sub(self.spot_offset):get() )
					st:SetColor(clr)
				else
					table.insert(del, id)
				end
			end
		elseif st then
			table.insert(del, id)
		end
	end
	for i, v in ipairs(del) do
		if v then
			self.map:DetachChild(self.map_spots[v])
			self.map_spots[v] = nil
		end
	end
end

function UIScriptHUD:ConvertRealToLocal(pos)
	local res = vector2()
	res.x = (pos.x - self.bound_rect.x1) *map_zoom
	res.y = ( self.bound_rect:height() - (pos.z - self.bound_rect.y1) ) *map_zoom

	res:sub(self.map_center)
	rotation(res, self.dir)
	res:add(self.map_center)

--	res:mul(kScreen, 1)
	return res
end

function UIScriptHUD:DrawSpot(obj)
	local clr = get_point_color(obj)
	if not clr then
		return false
	end

	local pos = self:ConvertRealToLocal( obj:position() )
	pos:sub(self.spot_offset)

	local st = CUIStatic()
	st:Init("ui_minimap_point", pos.x, pos.y, 3, 3)
	st:SetAutoDelete(true)
	st:SetStretchTexture(true)
	st:SetColor(clr)
	self.map:AttachChild(st)
	st:Show(true)

	return st
end

function UIScriptHUD:NeedShowPointer(rect)
	
end
---------------------------------------------------------------------------
function get_bound_rect()
	local vol = level.get_bounding_volume()
	return Frect():set(
		vol.min.x,
		vol.min.z,
		vol.max.x,
		vol.max.z
	)
end
-- флажки состояния тела актера
local body_states = {
	fwd			= 1,
	back		= 2,
	l_strafe	= 4,
	r_strafe	= 8,
	crouch		= 16,
	accel		= 32,
	turn		= 64,
	jump		= 128,
	fall		= 256,
	landing		= 512,
	landing2	= 1024,
	climb		= 2048,
	sprint		= 4096,
	l_lookout	= 8192,
	r_lookout	= 16384
}
function get_body_state_texture()
	local state = Actor:actor_body_state()
	if bit_and(state, body_states.climb) ~= 0 then
		return "climb"
	else
		if bit_and(state, body_states.crouch) ~= 0 then
			if bit_and(state, body_states.accel) ~= 0 then
				return "creep"
			else
				return "crouch"
			end
		else
			if bit_and(state, body_states.sprint) ~= 0 then
				return "sprint"
			else
				if bit_and(state, body_states.accel) ~= 0 then
					return "normal"
				else
					return "run"
				end
			end
		end
	end
end

local id2color = {
	[0] = GetARGB(255,255,0,0),
	[1] = GetARGB(255,255,200,0),
	[2] = GetARGB(255,50,255,0),
	[3] = GetARGB(255,168,168,168),
	[4] = GetARGB(255,255,75,170)
}
function get_point_color(obj)
	local colorID = nil

	if obj:is_stalker() or obj:is_trader() then
		if obj:alive() then
			local rel = obj:relation(Actor)
			if rel == game_object.friend then
				colorID = 2
			elseif rel == game_object.neutral then
				colorID = 1
			elseif show_enemy and rel == game_object.enemy then
				colorID = 0
			end
		elseif show_corpse then
			colorID = 3
		end
	elseif show_monsters and obj:is_monster() and obj:alive() then
		colorID = 4
	end

	if colorID == nil then return false end

	return id2color[colorID]
end

function rotation(pos, angle)
	local _sc = math.cos(angle)
	local _sn = math.sin(angle)
	local x = pos.x*_sc + pos.y*_sn
	local y = pos.y*_sc - pos.x*_sn
	return pos:set(x, y)
end

---------------------------------------------------------------------------
function init()
	if wnd ~= nil then return end
	wnd = UIScriptHUD()
	get_hud():AddDialogToRender(wnd)
	wnd:Show(false)
end
function destroy()
	if wnd ~= nil then
		get_hud():RemoveDialogToRender(wnd)
		wnd = nil
	end
end

function on_key_press(dik, bind)
	if bind == key_bindings.kSCORES then
		if not wnd then init() end
		if level.main_input_receiver() ~= nil
			or bind_actor.scopeUsed
		then return end
		wnd:Show(true)
		wnd.need_update = true
	end
end

function on_key_release(dik, bind)
	if bind == key_bindings.kSCORES then
		if not wnd then init() end
		if not wnd:IsShown() then return end
		wnd:Show(false)
		wnd.need_update = false
	end
end

function on_options_change()
	show_corpse = game_options.ScriptMapShowDeadbody
	show_enemy = game_options.ScriptMapShowEnemy
	show_monsters = game_options.ScriptMapShowMonsters
end

function attach()
	if game_options.CurrentHUD ~= "ns_pda_script" then return end

	xr_s.subscribe("net_spawn", this.init)
	xr_s.subscribe("net_destroy", this.destroy)
	xr_s.subscribe("key_press", this.on_key_press)
	xr_s.subscribe("key_release", this.on_key_release)
end
