-- -*- mode: lua; encoding: windows-1251 -*-
-- Options
local show_npc = true
local show_corpse = true
local show_gps = true
local show_treasures = true
local biodetector_mode = false

local dev = device()
local wnd = nil

local step_angle = 1.5/180/math.pi -- шаг за апдейт в радианах (скорость поворота)
local two_pi = 2*math.pi

local map_zoom = 2
local map_dist = 150/map_zoom

---------------------------------------------------------------------------
class "UIScriptHUD" (CUIWindow)

function UIScriptHUD:__init()
	super()

	self.biodetector_mode = false
	self.sweep_angle = 0

	self:Init(0, 0, 1024, 768)

	local xml = CScriptXmlInit()
	xml:ParseFile("ui_script_hud.xml")

	local ini = ini_file( "game_maps_single.ltx" )
	local level_name = level.name()
	self.map_texture = ini:r_string_ex(level_name, "texture", "ui\\ui_nomap2")

	local tmp = ini:r_string_ex(level_name, "bound_rect", nil)
	if tmp then
		tmp = string.explode(tmp, ",", true)
	else
		tmp = {10000, 10000, -10000, -10000}
	end
	self.bound_rect = Frect():set( unpack(tmp) )

	self.map_frame = xml:InitStatic("level_frame", self)
	self.map_frame:ClipperOn()
	self.clip_center = vector2():set( self.map_frame:GetWidth()/2, self.map_frame:GetHeight()/2 )

	self.map = xml:InitStatic("level_map", self.map_frame)
	local w = self.bound_rect:width() *map_zoom
	local h = self.bound_rect:height() *map_zoom
	self.map:SetWndRect( 0, 0, w, h )
	self.map:InitTexture(self.map_texture)
	self.map_center = vector2():set( w/2, h/2 )

	self.sweep = xml:InitStatic("biodetector_sweep", self.map_frame)
	self.sweep:Show(false)

	local st = xml:InitStatic("minimap_center", self.map_frame)
	st:SetWndPos(
		self.clip_center.x - st:GetWidth()/2,
		self.clip_center.y - st:GetHeight()/2
	)

	self.map_spots = {}
	self.spot_offset = vector2():set(1.5, 1.5)

	xml:InitStatic("background", self)

	self.body_state = xml:InitStatic("body_state", self)

	st = xml:InitStatic("static_power", self)
	self.progress_power = xml:InitProgressBar("power_progress", st)

--	self.progress_luminosity = xml:InitProgressBar("luminosity_progress", st)
--	self.progress_noise = xml:InitProgressBar("noise_progress", st)

	st = xml:InitStatic("static_health", self)
	self.progress_health = xml:InitProgressBar("progress_bar_health", st)

	st = xml:InitStatic("static_armor", self)
	self.progress_armor = xml:InitProgressBar("progress_bar_armor", st)
	
	st = xml:InitStatic("static_radiation", self)
	self.progress_radiation = xml:InitProgressBar("progress_bar_radiation", st)

	self.time_static = xml:InitStatic("time_static", self)

	xr_s.subscribe("update", self.Update, {self = self})
	self.need_update = false
end

function UIScriptHUD:__finalize()
end

function UIScriptHUD:Update(delta)
	if not self.need_update then return end

	self:UpdateIndicators()
	self:UpdateMap()
end

function UIScriptHUD:UpdateIndicators()
	local tex = "ui_hud_soldier_"..get_body_state_texture()
	self.body_state:InitTexture(tex)

	self.progress_power:SetProgressPos( Actor.power * 100 )
	self.progress_health:SetProgressPos( Actor.health * 100 )
	if arc_inventory.IsRadDetected() then
		self.progress_radiation:SetProgressPos( 100 * arc_radiation.RAD_DOSE / arc_radiation.DOSE_DEADLY )
	end
	if Actor:get_current_outfit() then
		self.progress_armor:SetProgressPos( Actor:get_current_outfit():condition() * 100 )
	end

	self.time_static:SetText( string.format( "%02d:%02d", level.get_time_hours(), level.get_time_minutes() ) )
end

function UIScriptHUD:UpdateMap()
	self.dir = -dev.cam_dir:getH()

	-- Update map position
	self.map:SetHeading(self.dir)
	local pos = self:ConvertRealToLocal( Actor:position() )
	local new_pos = vector2()
	new_pos:sub(pos)
	new_pos:add(self.clip_center)
	self.map:SetWndPos( new_pos:get() )

	if self.biodetector_mode then
		self.sweep_angle = self.sweep_angle - step_angle
		if self.sweep_angle < 0 then
			self.sweep_angle = self.sweep_angle + two_pi
		end
		self.sweep:SetHeading(self.sweep_angle) -- поворачиваем локатор
	end

	self:UpdateNPCSpots()
	self:UpdateGPSSpots()
end

function UIScriptHUD:UpdateGPSSpots()
end

function UIScriptHUD:UpdateNPCSpots()
	-- Update map spots
	local del = {}
	local st
	local actor_pos = Actor:position()
	for id, obj in pairs(db.creatures) do
		st = self.map_spots[id]
		if AI:object(id)
			and obj:position():distance_to_xz(actor_pos) < map_dist
		then
			if not st then
				self.map_spots[id] = self:DrawSpot(obj)
			else
				local clr = get_point_color(obj)
				if clr then
					st:SetWndPos( self:ConvertRealToLocal( obj:position() ):sub(self.spot_offset):get() )
					st:SetColor(clr)
				else
					table.insert(del, id)
				end
			end
		elseif st then
			table.insert(del, id)
		end
	end
	-- удалим неактуальные метки
	for id, st in pairs(self.map_spots) do
		if db.creatures[id] == nil then
			table.insert(del, id)
		end
	end
	for i, v in ipairs(del) do
		self.map:DetachChild( self.map_spots[v] )
		self.map_spots[v] = nil
	end
end

function UIScriptHUD:ConvertRealToLocal(pos)
	local res = vector2()
	res.x = (pos.x - self.bound_rect.x1) *map_zoom
	res.y = ( self.bound_rect:height() - (pos.z - self.bound_rect.y1) ) *map_zoom

	res:sub(self.map_center)
	rotation(res, self.dir)
	res:add(self.map_center)

	return res
end

function UIScriptHUD:DrawSpot(obj)
	local clr = get_point_color(obj)
	if not clr then
		return nil
	end

	local pos = self:ConvertRealToLocal( obj:position() )
	pos:sub(self.spot_offset)

	local st = CUIStatic()
	st:Init("ui_minimap_point", pos.x, pos.y, 3, 3)
	st:SetAutoDelete(true)
	st:SetStretchTexture(true)
	st:SetColor(clr)
	self.map:AttachChild(st)
	st:Show(true)

	return st
end

function UIScriptHUD:SwitchBioradar()
	if self.biodetector_mode == biodetector_mode then return end
	self.biodetector_mode = biodetector_mode

	if self.biodetector_mode then
		self.map:InitTexture("intro\\intro_back")
		self.sweep:Show(true)
	else
		self.map:InitTexture(self.map_texture)
		self.sweep:Show(false)
	end
end

---------------------------------------------------------------------------
function get_level_bound_rect()
	local vol = level.get_bounding_volume()
	return Frect():set(
		vol.min.x,
		vol.min.z,
		vol.max.x,
		vol.max.z
	)
end
-- флажки состояния тела актера
local body_states = {
	fwd			= 1,
	back		= 2,
	l_strafe	= 4,
	r_strafe	= 8,
	crouch		= 16,
	accel		= 32,
	turn		= 64,
	jump		= 128,
	fall		= 256,
	landing		= 512,
	landing2	= 1024,
	climb		= 2048,
	sprint		= 4096,
	l_lookout	= 8192,
	r_lookout	= 16384
}
function get_body_state_texture()
	local state = Actor:actor_body_state()
	if bit_and(state, body_states.climb) ~= 0 then
		return "climb"
	else
		if bit_and(state, body_states.crouch) ~= 0 then
			if bit_and(state, body_states.accel) ~= 0 then
				return "creep"
			else
				return "crouch"
			end
		else
			if bit_and(state, body_states.sprint) ~= 0 then
				return "sprint"
			else
				if bit_and(state, body_states.accel) ~= 0 then
					return "normal"
				else
					return "run"
				end
			end
		end
	end
end

local id2color = {
	[0] = GetARGB(255,255,0,0),		-- enemy
	[1] = GetARGB(255,255,200,0),	-- neutral
	[2] = GetARGB(255,50,255,0),	-- friend
	[3] = GetARGB(255,168,168,168)	-- corpse
}
function get_point_color(obj)
	if biodetector_mode then
		local clr = biodetector.getColor(obj)
		return clr and GetARGB( 255, unpack(clr) ) or nil
	end

	if not show_npc then
		return nil
	end

	local colorID = nil

	if obj:is_stalker() or obj:is_trader() then
		if obj:alive() then
			local rel = obj:relation(Actor)
			if rel == game_object.friend then
				colorID = 2
			elseif rel == game_object.neutral then
				colorID = 1
			else
				return nil
			end
		elseif show_corpse then
			colorID = 3
		end
	else
		return nil
	end

	if colorID == nil then return nil end

	return id2color[colorID]
end

function rotation(pos, angle)
	local _sc = math.cos(angle)
	local _sn = math.sin(angle)
	local x = pos.x*_sc + pos.y*_sn
	local y = pos.y*_sc - pos.x*_sn
	return pos:set(x, y)
end

---------------------------------------------------------------------------
function init()
	this.init_settings()

	wnd = UIScriptHUD()
	get_hud():AddDialogToRender(wnd)
	wnd:Show(false)
end
function destroy()
	if wnd ~= nil then
		get_hud():RemoveDialogToRender(wnd)
		wnd = nil
	end
end

function on_key_press(dik, bind)
	if bind == key_bindings.kSCORES then
		if not wnd then init() end

		if level.main_input_receiver() ~= nil
			or bind_actor.scopeUsed
		then return end

		set_static_rescale_factor(1)
		wnd:Show(true)
		wnd.need_update = true
	end
end

function on_key_release(dik, bind)
	if bind == key_bindings.kSCORES then
		if not wnd then init() end
		if not wnd:IsShown() then return end
		set_static_rescale_factor(kScreen)
		wnd:Show(false)
		wnd.need_update = false
	end
end

function bioradar_off()
	Actor:disable_info_portion("pda_biodetector_mode")
	biodetector_mode = false
	wnd:SwitchBioradar()
end

function init_settings()
	show_npc = has_alife_info("pda_show_npc")
	show_corpse = has_alife_info("pda_show_corpse")
	show_gps = has_alife_info("pda_show_gps")
	show_treasures = has_alife_info("pda_show_treasures")
	biodetector_mode = has_alife_info("pda_biodetector_mode")

	if wnd then
		wnd:SwitchBioradar()
	end
end

function attach()
	if game_options.CurrentHUD ~= "ns_pda_script" then return end

	xr_s.subscribe("net_spawn", this.init)
	xr_s.subscribe("net_destroy", this.destroy)
	xr_s.subscribe("key_press", this.on_key_press)
	xr_s.subscribe("key_release", this.on_key_release)
end
