-- -*- mode: lua; encoding: windows-1251 -*-
local hud_name = game_options.CurrentHUD

local t_clock = {}
local t_rad = {}

local p_width = 0
local saved_width = -1
local new_width, cs_rad, cs_rad_back
local hud = nil

function update_rad_scale( f )
	cs_rad_back = hud:GetCustomStatic( "hud_rad_back" )
	cs_rad = hud:GetCustomStatic( "hud_rad_level" )

	if not f then
		if cs_rad_back then
			hud:RemoveCustomStatic( "hud_rad_back" )
			cs_rad_back = nil
		end
		if cs_rad then
			hud:RemoveCustomStatic( "hud_rad_level" )
			cs_rad = nil
		end
		return
	end

	if cs_rad_back == nil then
		cs_rad_back = hud:AddCustomStatic( "hud_rad_back", true )
		SetRect( cs_rad_back:wnd(), t_rad.back )
		cs_rad_back:wnd():Show(true)
	end
	if cs_rad == nil then
		cs_rad = hud:AddCustomStatic( "hud_rad_level", true )
		SetRect( cs_rad:wnd(), t_rad.scale )
		cs_rad:wnd():Show(true)
		cs_rad:wnd():SetWidth( 0 )
		p_width = t_rad.scale[3]
	end

	new_width = p_width * arc_radiation.get_rad_dose() / arc_radiation.get_deadly_dose()
	if saved_width ~= new_width then
		cs_rad:wnd():SetWidth( new_width )
		saved_width = new_width
	end
end

function show_time( f )
    local cs = hud:GetCustomStatic( "hud_show_time" )
	if f then
		if cs == nil then
			cs = hud:AddCustomStatic( "hud_show_time", true )
			SetRect( cs:wnd(), t_clock.pos )
			cs:wnd():SetTextColor( unpack( t_clock.color ) )
		end
		cs:wnd():SetText( string.format( "%02d:%02d", level.get_time_hours(), level.get_time_minutes() ) )
	else
		if cs then
			hud:RemoveCustomStatic( "hud_show_time" )
		end
    end
end

function update( delta )
	local bShow = not bind_stalker.scopeUsed

	if t_clock.enabled then
		show_time( bShow )
	end

	if t_rad.enabled then
		bShow = bShow and arc_inventory.IsRadDetected()
		update_rad_scale( bShow )
	end
end

function SetRect( wnd, t )
	wnd:SetWndPos( t[1], t[2] )
	wnd:SetHeight( t[4] )
	wnd:SetWidth( t[3] )
end

function reload()
	if t_rad.enabled then
		update_rad_scale( false )
	end
	if t_clock.enabled then
		show_time( false )
	end
end

function table2number( t )
	for i = 1, #t do
		t[i] = tonumber( t[i] )
	end
end

function init()
	if hud == nil then
		hud = get_hud()
	end

	local ini = ini_file( "misc\\ui_huds.ltx" )
	hud_name = game_options.CurrentHUD
	if not ini:section_exist( hud_name ) then
		abort( "[%s]: current hud [%s] has no settings in 'ui_huds.ltx'", script_name(), hud_name )
		return
	end

	local v = ini:r_float( hud_name, "dosimeter_y" )
	arc_ui_dosimeter.set_dosimeter_pos( v )

	local i = ini:r_u32( hud_name, "add_indicators" )

	t_clock = {}
	t_clock.enabled = bit_and( i, 1 ) ~= 0
	if t_clock.enabled then
		v = ini:r_string( hud_name, "clock_pos" )
		t_clock.pos = string.explode( v, ",", true )
		table2number( t_clock.pos )
		v = ini:r_string( hud_name, "clock_color" )
		t_clock.color = string.explode( v, ",", true )
		table2number( t_clock.color )
	end

	t_rad = {}
	t_rad.enabled = bit_and( i, 2 ) ~= 0
	if t_rad.enabled then
		v = ini:r_string( hud_name, "rad_back_pos" )
		t_rad.back = string.explode( v, ",", true )
		table2number( t_rad.back )
		v = ini:r_string( hud_name, "rad_pos" )
		t_rad.scale = string.explode( v, ",", true )
		table2number( t_rad.scale )
	end
end

function on_change_hud()
	local new_hud_name = game_options.CurrentHUD
	if hud_name ~= new_hud_name then
		local ini = ini_file( "misc\\ui_huds.ltx" )
		local fs = getFS()
		local f1, f2
		local res, id, val
		for i = 0, ini:line_count("files")-1 do
			res, id, val = ini:r_line("files", i, "", "")
			f1 = fs:update_path( "$game_huds$", new_hud_name.."\\"..id )
			f2 = fs:update_path( "$game_data$", id )
			fs:file_copy( f1, f2 )
		end
		hud_name = new_hud_name
		return true
	end
	return false
end

function get_all_huds()
	local ini = ini_file( "misc\\ui_huds.ltx" )
	local ret = {}
	local res, id, val
	for i = 0, ini:line_count( "huds" ) - 1 do
		res, id, val = ini:r_line( "huds", i, "", "" )
		table.insert( ret, trim(id) )
	end
	return ret
end

function attach()
	xr_s.subscribe( "first_update", this.init, { once = true } )
	xr_s.subscribe( "update", this.update )
end

