--------------------------------------ini---------------------------------------
function read_from_ini(ini,sec,lin,def,typ)
	if not ini then
		ini = sys_ini
	end
	if sec and lin and ini:section_exist(sec) and ini:line_exist(sec,lin) then
		if typ == 0 then
			return ini:r_bool(sec,lin)
		elseif typ == 1 then
			return ini:r_string(sec,lin) or def
		elseif typ == 2 then
			return ini:r_string_wq(sec,lin) or def
		elseif typ == 3 then
			return ini:r_s32(sec,lin) or def
		elseif typ == 4 then
			return ini:r_vector(sec,lin) or def
		else
			return ini:r_float(sec,lin) or def
		end
	else
		return def
	end
end

function read_from_ini_new(iniFileName,sec,lin,def,typ)
	--if sec and lin and ini:section_exist(sec) and ini:line_exist(sec,lin) then
	if sec and lin then
		if typ == 0 then
			--return ini:r_bool(sec,lin)
			return getIniValueBool(sec,lin,def,iniFileName)
		elseif typ == 1 then
			--return ini:r_string(sec,lin)
			return getIniValueString(sec,lin,def,iniFileName)
		elseif typ == 2 then
			--return ini:r_string_wq(sec,lin)
			return getIniValueStringWQ(sec,lin,def,iniFileName)
		else
			--return ini:r_float(sec,lin)
			return getIniValueFloat(sec,lin,def,iniFileName)
		end
	else
		return def
	end
end

function collect_sections(ini,sections,tonum)
	local r,p = {},{}
	for k,v in ipairs(sections) do
		if ini:section_exist(v) then
			local n = ini:line_count(v)
			if n > 0 then
				for i = 0,n-1 do
					local res,id,val = ini:r_line(v,i,"","")
					if r[id] == nil then
						r[id] = tonum and tonumber(val) or val
					end
				end
			end
			p[k] = n
		else
			p[k] = 0
		end
	end
	return r,p
end

function collect_sections_new(iniFileName,sections)
	local r,p = {},{}
	for k,v in ipairs(sections) do
		if iniLineSectionExist(v, iniFileName) then
			local n = iniLinesCount(v, iniFileName)
			if n > 0 then
				for i = 0,n-1 do
					local res,id,val = getIniLine(v,i,"","", iniFileName)
					if r[id] == nil then
						r[id] = val
					end
				end
			end
			p[k] = n
		else
			p[k] = 0
		end
	end
	return r,p
end

function parse_list(ini,sec,val,convert,tonum)
	local tmp = string.explode(read_from_ini(ini,sec,val,"",1), ",", true)
	if tonum then
		for i,v in ipairs(tmp) do
			local res = tonumber(v)
			if res ~= nil then
				tmp[i] = res
			end
		end
	end
	if convert and #tmp ~= 0 then
		local t = {}
		for i,v in ipairs(tmp) do
			t[v] = convert ~= -1 and convert or i
		end
		return t,tmp
	end
	return tmp
end

local ranksl
function get_rank_list()
	if ranksl then
		return ranksl
	end
	local tmp = parse_list(nil,"game_relations","rating")
	ranksl = {}
	for i,rn in ipairs(tmp) do
		if not tonumber(rn) then
			table.insert(ranksl,rn)
		end
	end
	return ranksl
end

local communitiesl
function get_communities_list()
	if communitiesl then
		return communitiesl
	end
	local tmp = parse_list(nil,"game_relations","communities")
	communitiesl = {}
	for i,cn in ipairs(tmp) do
		if not tonumber(cn) then
			table.insert(communitiesl,cn)
		end
	end
	return communitiesl
end

--------------------------------------str---------------------------------------
-- удаление из строки начальных и конечных пробелов
function trim_space(s)
	local i,j = 1,-1
	
	while string.sub(s,i,i) == " " do
		i = i+1
	end
	while string.sub(s,j,j) == " " do
		j = j-1
	end

	return string.sub(s,i,j)
end

function vec_to_str(vec)
	if vec == nil then return "<nil>" end
	return string.format("[%s:%s:%s]",vec.x,vec.y,vec.z)
end

local function format_safe(str,...)
	local i,args = 0,{...}
	local f = function()
		i = i + 1
		local a = args[i]
		if a == nil then
			return "<nil>"
		elseif type(a) == "userdata" then
			if a.setHP then
				return vec_to_str(a)
			elseif a.name then
				return "<obj>:"..a:name()
			end
			return "<userdata>"
		end
		return tostring(a)
	end
	return string.gsub(str,"%%s",f)
end

function count_table(t)
	local cnt = 0
	for k,v in pairs(t) do
		cnt = cnt+1
	end
	return cnt
end

--------------------------------------class---------------------------------------
actor_clsid = clsid.actor

creatures_clslist = {
		actor = actor_clsid,
		stalker = clsid.script_stalker,
		dog = clsid.dog_s,
		boar = clsid.boar_s,
		flesh = clsid.flesh_s,
		pseudodog = clsid.pseudodog_s,
		bloodsucker = clsid.bloodsucker_s,
		snork = clsid.snork_s,
		tushkano = clsid.tushkano_s,
		zombie = clsid.zombie_s,
		giant = clsid.gigant_s,
		chimera = clsid.chimera_s,
		burer = clsid.burer_s,
		controller = clsid.controller_s,
		poltergeist = clsid.poltergeist_s,
		fracture = clsid.fracture_s,
		cat = clsid.cat_s,
		psy_dog = clsid.psy_dog_s,
		psy_dog_phantom = clsid.psy_dog_phantom_s
}

local firearm_clst = {
		[clsid.wpn_ak74] 				= true,
		[clsid.wpn_ak74_s] 				= true,
		[clsid.wpn_bm16] 				= true,
		[clsid.wpn_bm16_s] 				= true,
		[clsid.wpn_fn2000] 				= true,
		[clsid.wpn_fort]				= true,
		[clsid.wpn_groza] 				= true,
		[clsid.wpn_groza_s] 			= true,
		[clsid.wpn_hpsa] 				= true,
		[clsid.wpn_hpsa_s] 				= true,
		[clsid.wpn_lr300] 				= true,
		[clsid.wpn_lr300_s] 			= true,
		[clsid.wpn_pm] 					= true,
		[clsid.wpn_pm_s] 				= true,
		[clsid.wpn_rg6] 				= true,
		[clsid.wpn_rg6_s] 				= true,
		[clsid.wpn_rpg7] 				= true,
		[clsid.wpn_rpg7_s] 				= true,
		[clsid.wpn_shotgun] 			= true,
		[clsid.wpn_shotgun_s] 			= true,
		[clsid.wpn_svd] 				= true,
		[clsid.wpn_svd_s] 				= true,
		[clsid.wpn_svu] 				= true,
		[clsid.wpn_svu_s] 				= true,
		[clsid.wpn_usp45] 				= true,
		[clsid.wpn_usp45_s] 			= true,
		[clsid.wpn_val] 				= true,
		[clsid.wpn_val_s] 				= true,
		[clsid.wpn_vintorez] 			= true,
		[clsid.wpn_vintorez_s] 			= true,
		[clsid.wpn_walther] 			= true,
		[clsid.wpn_walther_s] 			= true}

function item_is_fa(o,c)
	if not c then
		c = o and o:clsid()
	end
	if c and firearm_clst[c] then
		return true
	end
	return false
end

function item_is_knife(o,c)
	if not c then
		c = o and o:clsid()
	end
	return c == clsid.wpn_knife_s
end

local blaster_clst = {
		[clsid.wpn_rg6] 				= true,
		[clsid.wpn_rg6_s] 				= true,
		[clsid.wpn_rpg7] 				= true,
		[clsid.wpn_rpg7_s] 				= true}

function item_is_blaster(o,c)
	if not c then
		c = o and o:clsid()
	end
	if c and blaster_clst[c] then
		return true
	end
	return false
end

--[[
local ammo_clst = {
		[clsid.wpn_ammo] 				= true,
		[clsid.wpn_ammo_vog25] 			= true,
		[clsid.wpn_ammo_m209] 			= true,
		[clsid.wpn_ammo_og7b] 			= true}

function item_is_ammo(o,c)
	if not c then
		c = o and o:clsid()
	end
	if c and ammo_clst[c] then
		return true
	end
	return false
end
]]

function is_actor(o,c)
	if not c then
		c = o and o:clsid()
	end
	return c == actor_clsid
end

local anom_clst = {
		[clsid.ameba_zone] 				= true,
		[clsid.torrid_zone] 			= true,
		[clsid.zone_acid_fog] 			= true,
		[clsid.zone_bfuzz] 				= true,
		[clsid.zone_bfuzz_s] 			= true,
		[clsid.zone_dead] 				= true,
		[clsid.zone_galant_s] 			= true,
		[clsid.zone_galantine] 			= true,
		[clsid.zone_mbald_s] 			= true,
		[clsid.zone_mincer] 			= true,
		[clsid.zone_mincer_s] 			= true,
		[clsid.zone_mosquito_bald] 		= true,
		[clsid.zone_radioactive] 		= true,
		[clsid.zone_rusty_hair] 		= true}

function is_anomaly(o,c)
	if not c then
		c = o and o:clsid()
	end
	if c and anom_clst[c] then
		return true
	end
	return false
end

--------------------------------------sch---------------------------------------
function add_anim(npc,anim,hand_usage,use_movement_controller)
	if not use_movement_controller then
		use_movement_controller=false
	end
	if anim then
		npc:add_animation(anim,hand_usage,use_movement_controller)
	end
end

function get_sound(snd)
	if snd then
		return xr_sound.get_safe_sound_object(snd)
	end
end

--------------------------------------weapon---------------------------------------
function get_wm(npc,enabled_only)
	local st = rx_ai.get_storage(npc:id())
	if st.wm and not (enabled_only and st.wm.disabled) then
		return st.wm
	end
end

function get_weapon(npc)
	return rx_wmgr and rx_wmgr.get_wm(npc):get_weapon() or npc:best_weapon()
end

function get_ammo_type(wpn)
	local obj = AI:object(wpn:id())
	if obj then
		local pk = net_packet()
		obj:STATE_Write( pk )
		pk:r_seek( pk:w_tell() - 1 )
		return pk:r_u8()	-- ammo_type
	end
	return 0
end

function in_grenade_mode(wpn)
	local obj = AI:object(wpn:id())
	if obj then
		local pak = netpk:get(obj)
		if bit_and(pak.addon_flags,addon_flags.grenade_launcher) ~= 0 then
			return pak.upd.grenade_mode ~= 0
		end
	end
	return false
end

function get_mag_size(section)
	return (rx_wmgr and not rx_wmgr.wm_modes.forbiddens[section] and rx_wmgr.read_wpn_params(section).mag) or rx_utils.read_from_ini(nil,section,"ammo_mag_size",1,3)
end

function get_wpn_type(section)
	return (rx_wmgr and not rx_wmgr.wm_modes.forbiddens[section] and rx_wmgr.read_wpn_params(section).typ) or rx_utils.read_from_ini(nil,section,"ef_weapon_type",0,3)
end

--------------------------------------addons---------------------------------------
local adt = {}
function get_addon_status(wpn,addon)
	local sec = wpn:section()
	if not adt[sec] then
		adt[sec] = {}
	end
	if not adt[sec][addon] then
		local ast = {sc = "scope_status",sl = "silencer_status",gl = "grenade_launcher_status"}
		adt[sec][addon] = read_from_ini(nil,sec,ast[addon],0)
	end
	return adt[sec][addon]
end

function get_addon_flag(wpn,with_int)
	local id = wpn:id()
	local flag = 0
	local sobj = AI:object(id)
	if sobj then
		flag =  netpk:get(sobj).addon_flags or 0
--	else
--		printf("get_addon_flag[%s]: not sobj!",wpn:name())
	end
	if with_int then
		if get_addon_status(wpn,"sc") == 1 then
			flag = flag+1
		end
		if get_addon_status(wpn,"sl") == 1 then
			flag = flag+4
		end
		if get_addon_status(wpn,"gl") == 1 then
			flag = flag+2
		end
	end
	return flag
end

local ft = {sc = 1,sl = 4,gl = 2}
function addon_attached(wpn,addon,flag)
	if ft[addon] then
		return bit_and(flag or get_addon_flag(wpn,true),ft[addon]) == ft[addon]
	end
end

--------------------------------------ai-----------------------------------------
function npc_in_cover(npc,stand)
	local st = rx_ai.get_storage(npc:id(),"in_cover")
	local be,de = npc:best_enemy(),db.storage[npc:id()].danger.exist
	if (be and not xr_wounded.is_wounded(be) or de) then
		if stand and not npc:path_completed() then
			st.evn = false
			return false
		end
	else
		return true
	end
	local tg = time_global()
	if (st.wait or 0) > tg then
		return st.evn
	end
	local enemies,tt = {},{}
	if be and not xr_wounded.is_wounded(be) then
		enemies[1] = be
		tt[be:id()] = true
	else	-- в отсутствие врага проверяем угрозу
		if not be and de and npc:best_danger() then
			local dir = npc:best_danger():position():sub(npc:position())
			local cover = level.cover_in_direction(npc:level_vertex_id(),dir) or 1
			if dir:magnitude() < 8 or 1-cover < 0.3 then
				st.evn = false
				st.wait = tg+3000
--				printf("npc_in_cover[%s]:danger! %s dist %s cover %s",npc:character_name(),de,dir:magnitude(),1-level.cover_in_direction(npc:level_vertex_id(),dir))
				return false
			end
		end
		st.evn = true
		st.wait = tg+2000
		return true
	end
	for o in npc:memory_visible_objects() do
		local obj = o:object()
		local id = obj:id()
		if not tt[id] then
			if obj and obj:is_alive()
				and npc:relation(obj) == game_object.enemy
				and ( (IsStalker(obj) and not xr_wounded.is_wounded(obj))
				or IsMonster(obj) )
			then
				table.insert(enemies,obj)
				tt[id] = true
			end
		end
	end
	for o in npc:memory_sound_objects() do
		local obj = o:object()
		if not tt[obj:id()] then
			if obj and obj:is_alive()
				and npc:relation(obj) == game_object.enemy
				and ( (IsStalker(obj) and not xr_wounded.is_wounded(obj))
				or IsMonster(obj) )
			then
				table.insert(enemies,obj)
			end
		end
	end
	local npc_lvid,npc_id = npc:level_vertex_id(),npc:id()
	local f = 28
	for i,enemy in ipairs(enemies) do
		if IsMonster(enemy) then
			local dist = enemy:position():distance_to_sqr(npc:position())
			local ebe = enemy:get_enemy()
			if (dist < 12*12 and enemy:see(npc)) or (dist < 50*50 and ebe and ebe:id() == npc_id) then
				st.evn = false
				st.wait = tg+5000
				return false
			end
		else
			local dir = enemy:position():sub(npc:position())
			local dist = dir:magnitude()
			local seez = npc:see(enemy) and enemy:see(npc)	-- НПС знает, что враг его видит
			local cover = level.cover_in_direction(npc_lvid,dir) or 1
			if seez or dist < 7 or cover > 0.8 or dist*cover > dist-f*cover then		-- чем дальше враг, тем меньше требуется прикрытия
--				printf("npc_in_cover[%s]:enemy![dist = %s,seez = %s,cover = %s]",npc:character_name(),dist,seez,1-cover)
				st.evn = false
				st.wait = tg+2500
				return false
			end
		end
	end
	st.evn = true
	st.wait = tg+400
	return true
end

function eat_medkit(npc,medkit)
	npc:eat(medkit)
end

function IsTrader(npc)	-- check
	local st = rx_ai.get_storage(npc:id())
	if st.is_trader == nil then
		return st.is_trader
	end
	return false
end

--------------------------------------switch---------------------------------------
function switch_online(id)
	if id == -1 then return end
	if AI then
		AI:set_switch_online(id,true)
		AI:set_switch_offline(id,false)
	end
end

function switch_offline(id)
	if AI then
		AI:set_switch_online(id,false)
		AI:set_switch_offline(id,true)
	end
end

--------------------------------------output---------------------------------------
function printf(str,...)
	log1(format_safe(str,...))
end

function prints(str)
	get_console():execute("load ~#I#:"..str)
--	log(str)
end

function give_game_news(str,time,...)
	if db.actor then
		db.actor:give_game_news(format_safe(str,...),"ui\\ui_iconsTotal",Frect():set(0,235,83,47),0,time)
	end
end

function ABORT(s,...)
	printf("rx_utils.abort: "..s,...)
	sys_ini:r_bool("___aborting","a")
end
_G['ABORTX'] = ABORT

function ASSERT(o,s,...)
	if not o then
		ABORT(s,...)
	end
end
_G['ASSERTX'] = ASSERT

function print_table(t,name)
    local print_r_cache={}
    local function sub_print_r(t,indent)
        if (type(t)~="userdata" and print_r_cache[tostring(t)]) then
            prints(indent.."*"..tostring(t))
        else
			if type(t)~="userdata" then
				print_r_cache[tostring(t)]=true
			end
            if (type(t)=="table") then
                for pos,val in pairs(t) do
                    if (type(val)=="table") then
                        prints(indent.."["..pos.."] => "..tostring(t).." {")
                        sub_print_r(val,indent..string.rep(" ",string.len(pos)+8))
                        prints(indent..string.rep(" ",string.len(pos)+6).."}")
                    elseif (type(val)=="string") then
                        prints(indent.."["..pos..'] => "'..val..'"')
					elseif(type(val)=="userdata") then
						prints(indent.."["..pos..'] => "userdata"')
                    else
                        prints(indent.."["..pos.."] => "..tostring(val))
                    end
                end
            elseif(type(t)=="userdata") then
				prints(indent.."userdata")
			else
                prints(indent..tostring(t))
            end
        end
    end
    if (type(t)=="table") then
		printf("print_table %s: %s {",(name or 'unnamed'),tostring(t))
        sub_print_r(t,"  ")
        prints("}")
    else
		printf("print_table %s: %s(%s) is not table!",(name or 'unnamed'),type(t),t)
    end
end

--------------------------------------zander_utils----------------------------------
local table_read = false
local table_shiftindex = 0
local go_read = false

function any_data_tostring(v)
	local string_returned = ""
	local t = type(v)
    if t == "string" then                    --- COMPLETE
        string_returned = " STRING:"..v
    elseif t == "number" then                --- COMPLETE
        string_returned = " NUMBER:"..tostring(v)                
    elseif t == "boolean" then                --- COMPLETE
        if v then
            string_returned = " BOOLEAN:true"
        else
            string_returned = " BOOLEAN:false"
        end
    elseif t == "nil" then                    --- NIL ТЕРЯЕТСЯ ПРИ МАССОВОЙ ПЕРЕДАЧЕ АРГУМЕНТА. COMPLETE
        string_returned = " NIL"
    elseif t == "function" then                --- COMPLETE
        string_returned = " FUNCTION"
        if not v then string_returned = string_returned.."<nil>" end
    elseif t == "userdata" then                --- COMPLETE
        string_returned = " USERDATA"
        go_read = true
        if not v then string_returned = string_returned.."<nil>" end
    elseif t == "table" then
        string_returned = " TABLE:"
        table_read = true
        if not v then string_returned = string_returned.."<nil>" end
    else
        string_returned = "UNKNOWN DATA"
        if not v then string_returned = string_returned.."<nil>" end
    end
    return string_returned
end

function table_to_str(tbl)
    if type(tbl) ~= "table" then return end
    table_shiftindex = table_shiftindex + 1
    local s = string.rep(" ", table_shiftindex * 3)
    prints(s.."{")
    for k,v in pairs(tbl) do
        --prints(s.."[KEY: "..any_data_tostring(k).."] = VALUE: "..any_data_tostring(v)..";")
        prints(string.format("%s[KEY: %s] = VALUE: %s;", s, any_data_tostring(k), any_data_tostring(v)))
        if table_read then
        table_read = false
            if type(k) == "table" then
                prints(s.."Table key:")
                table_to_str(k)
            end
            if type(v) == "table" then
                prints(s.."Table value:")
                table_to_str(v)
            end
        end
        if go_read then
        --game_object_tostr(v)
        end
    end
    prints(s.."}")
    table_shiftindex = table_shiftindex - 1
end

function userdata_to_log(go)
	if type(go) == "userdata" then
		if go.id ~= nil and type(go.id) == 'function' and go.section ~= nil and type(go.section) == 'function' then
			local t = {
				id = go:id(),
				parent = go:parent(),
				section = go:section(),
				position = v_to_str(go:position()),
				lv = go:level_vertex_id(),
				gv = go:game_vertex_id(),
				clsid = go:clsid(),
				story_id = go:story_id()
				---
			}
			prints(";*game_object parameters")
			table_to_str(t)
		elseif go.x and type(go.x) == 'number' then
		--- attempt unpack as vector
			if go.y and go.z and type(go.y) == 'number' and type (go.z) == 'number' then
			prints(";vector parameters")
			local v = {
				x = go.x,
				y = go.y,
				z = go.z
			}
			table_to_str(v)
			else
			prints("unknown userdata")
			end
		elseif go.id and type(go.id) == 'number' and go.section_name and type(go.section_name) == 'function' then
			local ts = {
				id = go.id,
				section = go:section_name(),
				name = go:name(),
				clsid = go:clsid()
			}
			prints(";*server_object parameters")
			table_to_str(ts)
		else
			prints("unknown userdata")
		end
	end
end

function zander_log(...)
	table_shiftindex = 0
	local o = {...}
	for k,v in pairs(o) do
	prints(any_data_tostring(v)..";")
		if table_read then
		table_read = false
		table_to_str(v)
		end
		if go_read and type(v) == "userdata" then
		userdata_to_log(v)
		end
	end
end

--------------------------------------spy------------------------------------------

class "prof_spy"
function prof_spy:__init()
	self.store = {}
	self.global_timer = time_global()
end
function prof_spy:__finalize()
end

function prof_spy:start(name)
	if not self.store[name] then
		self.store[name] = {timer = profile_timer(),count = 0,time = 0,min_time = 0,max_time = 0,prev_ptime = 0}
	end
	local st = self.store[name]
	st.timer:start()
end

function prof_spy:finish(name)
	local st = self.store[name]
	st.timer:stop()
	local ptime = st.timer:time()
	local rtime = ptime-st.prev_ptime
	if rtime == 0 then
		return
	end
	st.prev_ptime = ptime
	st.time = st.time+rtime
	st.count = st.count+1
	st.min_time = (st.min_time == 0 or rtime < st.min_time) and rtime or st.min_time
	st.max_time = rtime > st.max_time and rtime or st.max_time
end

function prof_spy:get_stat(name)
	if name then
		local st = self.store[name]
		if not st then
			return "nil"
		end
		local global_time = time_global()-self.global_timer
		local exec_ms_in_sec = st.time/global_time
		local str = string.format("\n[%s]: cnt=[%s] time=[%s] min=[%s] max=[%s] prd=[%s] ret=[%s] insec=[%s]",name,st.count,st.time,st.min_time,st.max_time,global_time/st.count,st.time/st.count,exec_ms_in_sec)
		return str
	else
		local tt = {}
			for name,st in pairs(self.store) do
			local global_time = time_global()-self.global_timer
			local exec_ms_in_sec = st.time/global_time
			local str = string.format("\n[%s]: cnt=[%s] time=[%s] min=[%s] max=[%s] prd=[%s] ret=[%s] insec=[%s]",name,st.count,st.time,st.min_time,st.max_time,global_time/st.count,st.time/st.count,exec_ms_in_sec)
			table.insert(tt,str)
		end
		return tt
	end
end


function init() return true end