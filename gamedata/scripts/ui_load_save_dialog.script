-- -*- mode: lua; encoding: windows-1251 -*-
-- File:        UI_LOAD_DIALOG.SCRIPT
-- Description: Load Dialog for STALKER
-- Created:     28.10.2004
-- Copyright:   2004 GSC Game World
-- Author:      Serhiy Vynnychenko (narrator@gsc-game.kiev.ua)
-- Version:     0.5

class "list_item" (CUIListItemEx)

function list_item:__init() super()
	self:SetWndRect		(0,0,430,22)
	
	self.fn					= CUIStatic	()
	self.fn:SetAutoDelete	(true)
	self:AttachChild		(self.fn)
	self.fn:SetWndRect		(1,1,230,20)
	self.fn:SetTextColor	(0,0,0,0)

	self.tx					= CUIStatic	()
	self.tx:SetAutoDelete	(true)
	self:AttachChild		(self.tx)
	self.tx:SetWndRect		(1,1,230,20)
	self.tx:SetFont			(GetFontLetterica18Russian())
	self.tx:SetTextColor	(255,216,186,140)

	self.fage				= CUIStatic	()
	self.fage:SetAutoDelete	(true)
	self:AttachChild		(self.fage)
	self.fage:SetWndRect	(330,1,150,20)
	self.fage:SetFont		(GetFontLetterica16Russian())
	self.fage:SetTextColor	(255,216,186,140)
end

class "load_save_dialog" (CUIScriptWnd)

function load_save_dialog:__init(can_save) super()
	self.last_index = -1
	self.can_save = can_save
	self:InitControls()
	self:InitCallBacks()
	self:FillList()
	self:delete_autosave_screen()
	self.dlg = self
end

function load_save_dialog:__finalize()
end

function load_save_dialog:FillList()
	local f = getFS()
	local flist = f:file_list_open_ex("$game_saves$",bit_or(FS.FS_ListFiles,FS.FS_RootOnly),"*.sav")
	local f_cnt = flist:Size()

	flist:Sort(FS.FS_sort_by_modif_down)

	local file, file_name, date_time
	for	it=0, f_cnt-1 	do
		file		=	flist:GetAt(it)
		file_name = file:NameFull():sub(1, -5)
		date_time = "[" .. file:ModifDigitOnly() .. "]"
		self:AddItemToList(file_name, date_time)
	end
end

function load_save_dialog:InitControls()
	self:Init(0,0,1024,768)

	local xml			 = CScriptXmlInit()
	local ctrl
	xml:ParseFile("ui_mm_load_save_dlg.xml")

	xml:InitStatic("background",				self)

	local form = xml:InitStatic("form",			self)

	xml:InitStatic("form:caption",				form)

	ctrl = xml:InitStatic("form:picture",		form)
	ctrl:SetWindowName("static_pict")	

	xml:InitStatic("form:file_info",			form)

	self.file_caption 	= xml:InitStatic("form:file_caption",	form)
	self.file_data		= xml:InitStatic("form:file_data",		form)

	self.edit_filename = xml:InitEditBox("form:edit",			form)

	xml:InitFrame("form:list_frame",			form)

	self.list = xml:InitList("form:list", 		form)
	self.list:ShowSelectedItem(true)
	self:Register(self.list, "list_window")

	ctrl = xml:Init3tButton("form:btn_load",	form)	
	self:Register(ctrl, "button_load")

	ctrl = xml:Init3tButton("form:btn_save",	form)	
	self:Register(ctrl, "button_save")
	if not self.can_save then
		ctrl:Enable(false)
	end

	ctrl = xml:Init3tButton("form:btn_delete",	form)	
	self:Register(ctrl, "button_del")

	ctrl = xml:Init3tButton("form:btn_rename",	form)	
	self:Register(ctrl, "button_ren")

	ctrl = xml:Init3tButton("form:btn_cancel",	form)
	self:Register(ctrl, "button_cancel")	

	self.message_box = CUIMessageBoxEx()
	self:Register(self.message_box, "message_box")

	self.msgbox_id	= 0
end

function load_save_dialog:InitCallBacks()
	self:AddCallbackEx("button_load",		ui_events.BUTTON_CLICKED,             self.OnButton_load_clicked)
	if self.can_save then
		self:AddCallbackEx("button_save",		ui_events.BUTTON_CLICKED,             self.OnButton_save_clicked)
	end
	self:AddCallbackEx("button_cancel",		ui_events.BUTTON_CLICKED,             self.OnButton_cancel_clicked)
	self:AddCallbackEx("button_del",		ui_events.BUTTON_CLICKED,             self.OnButton_del_clicked)
	self:AddCallbackEx("button_ren",		ui_events.BUTTON_CLICKED,             self.OnButton_ren_clicked)
	self:AddCallbackEx("message_box",		ui_events.MESSAGE_BOX_YES_CLICKED,    self.OnMsgYes)
	self:AddCallbackEx("message_box",		ui_events.MESSAGE_BOX_OK_CLICKED,	  self.OnMsgYes)

	self:AddCallbackEx("list_window", ui_events.LIST_ITEM_CLICKED, 			  self.OnListItemClicked)
	self:AddCallbackEx("list_window", ui_events.WINDOW_LBUTTON_DB_CLICK,		  self.OnListItemDbClicked)
end

-- удаление скрина автосейва - он глючный
function load_save_dialog:delete_autosave_screen()
	local file = old_user_name().."_autosave.dds"
	if file_exist(file) then
		getFS():file_delete("$game_saves$", file)
	end
end

function load_save_dialog:OnButton_ren_clicked()
	if self.list:GetSize()==0 then return end

	local index = self.list:GetSelectedItem()
	if index == -1 then return end

	local item = self.list:GetItem(index)
	if item == nil then return end

	local text = self.edit_filename:GetText()
	if text == "" or item.fn:GetText() == text then return end

	self.msgbox_id = 4
	self.message_box:Init("message_box_confirm_load_save")
	self.message_box:SetText( game.translate_string("st_mm_file_rename") )
	self:GetHolder():start_stop_menu(self.message_box, true)
end

function load_save_dialog:OnListItemClicked()
--	if self.list:GetSize()==0 then return end
	
	local itm_index		= self.list:GetSelectedItem()
	if self.last_index == itm_index then return end
	self.last_index = itm_index
	
	local item			= self.list:GetItem(itm_index)
	
	local picture		= self:GetStatic("static_pict")	

	if item == nil then
		self.file_caption:SetText	("")
		self.file_data:SetText		("no file data")
		picture:InitTexture			("ui\\ui_noise")
		return
	end
	
	local item_text				= item.fn:GetText()
	local cap_text = item_text
    if #cap_text>30 then
        cap_text = cap_text:sub(1,29).."..."
    end
	self.file_caption:SetText	(cap_text)
	self.file_data:SetText		(file_data(item_text))
	
	if file_exist(item_text .. ".sav") ~= true then
		list_box:RemoveItem(itm_index)
		self.last_index = -1
		return
	end
	
	if file_exist(item_text .. ".dds") then
		picture:InitTexture(item_text)
	else
		picture:InitTexture("ui\\ui_noise")
	end

	self.edit_filename:SetText(item_text)
end

function load_save_dialog:OnListItemDbClicked()
	self:OnButton_load_clicked()
end

function load_save_dialog:OnMsgYes()
	local index = self.list:GetSelectedItem()
	
	if index == -1 then self.msgbox_id = 0 return end
	local item  = self.list:GetItem(index)
	if item == nil then self.msgbox_id = 0 return end

	local fname = item.fn:GetText()

	if self.msgbox_id == 1 then
		delete_save_game(fname)
		self.list:RemoveItem(index)
		self.last_index = -1
		self:OnListItemClicked()
	elseif self.msgbox_id == 2 then
		self:SaveFile(self.new_save)
		self:OnButton_cancel_clicked()
	elseif self.msgbox_id == 3 then
		self:load_game_internal(fname)
	elseif self.msgbox_id == 4 then
		self:RenameSelectedFile()
	end
	
	self.msgbox_id = 0
end

function load_save_dialog:RenameSelectedFile()
	local index		= self.list:GetSelectedItem()
	local item		= self.list:GetItem(index)
	local fname		= item.fn:GetText()
	local new_fname	= self.edit_filename:GetText()

	local fs = getFS()
	local f1 = fs:update_path("$game_saves$", fname..".sav")
	local f2 = fs:update_path("$game_saves$", new_fname..".sav")
	fs:file_rename(f1, f2, true)
	if fs:exist("$game_saves$", fname..".dds") then
		f1 = fs:update_path("$game_saves$", fname..".dds")
		f2 = fs:update_path("$game_saves$", new_fname..".dds")
		fs:file_rename(f1, f2, true)
	end

	item.fn:SetText(new_fname)

	if #new_fname>50 then
		new_fname = new_fname:sub(1,48)..'...'
	end
	item.tx:SetText(new_fname)

    if #new_fname>30 then
        new_fname = new_fname:sub(1,29).."..."
    end
	self.file_caption:SetText(new_fname)
end

function load_save_dialog:load_game_internal(fname)	
	local console = get_console()
	
	ui_mm_opt_add.check_options()
	
	if (AI == nil) then
		console:execute	("disconnect")	
		console:execute	("start server(" .. fname .. "/single/alife/load) client(localhost)")	
	else
		console:execute	("load " .. fname)	
	end
end

function load_save_dialog:OnButton_load_clicked()
	if self.list:GetSize()==0 then return end

	local index = self.list:GetSelectedItem()
	if index == -1 then return end

	local item		= self.list:GetItem(index)
	if item == nil then return end
	local fname		= item.fn:GetText()

	if valid_saved_game(fname) then
		if AI==nil or db.actor==nil or not db.actor:alive() then
			self:load_game_internal(fname)
		else
			self.msgbox_id = 3
			self.message_box:Init("message_box_confirm_load_save")		
			self:GetHolder():start_stop_menu(self.message_box, true)
		end
	else
		self.msgbox_id = 0
		self.message_box:Init("message_box_invalid_saved_game")		
		self:GetHolder():start_stop_menu(self.message_box, true)
	end
end

function load_save_dialog:OnButton_save_clicked()
	-- Get file name
	self.new_save		= self.edit_filename:GetText()
	self.new_save		= self.new_save:clear():trim()
	
	--// check for empty name
	if string.len(self.new_save) == 0 then
		self.msgbox_id = 0
		self.message_box:Init("message_box_empty_file_name")		
		self:GetHolder():start_stop_menu(self.message_box, true)
		return
	end
	
	--// check for match name
	local file_struct = getFS():exist("$game_saves$", self.new_save .. ".sav" )
	if file_struct ~= nil then
		self.msgbox_id = 2
		self.message_box:Init("message_box_file_already_exist")
		self:GetHolder():start_stop_menu(self.message_box, true)
		return
	end

	self:SaveFile(self.new_save)
	self:OnButton_cancel_clicked()
end

function load_save_dialog:SaveFile(fileName)
	if fileName then
		get_console():execute("save " .. fileName)
	end
end

function load_save_dialog:OnButton_cancel_clicked()
	self:ClearCallbacks()
	self:GetHolder():start_stop_menu	(self.owner, true) --new(show main window)
	self:GetHolder():start_stop_menu	(self,true)
	self.owner:Show						(true)
	self.dlg = nil
end

function load_save_dialog:OnButton_del_clicked()
	if self.list:GetSize()==0 then return end
	local index = self.list:GetSelectedItem()
	
	if index == -1 then return end
	if self.list:GetItem(index) == nil then return end
	self.msgbox_id = 1
	
	self.message_box:Init("message_box_delete_file_name")		
	self:GetHolder():start_stop_menu(self.message_box, true)
end

function load_save_dialog:AddItemToList(file_name, date_time)
	local _itm = list_item()
	_itm.fn:SetText(file_name)
	if #file_name>50 then file_name = file_name:sub(1,48)..'...' end
	_itm.tx:SetText(file_name)
	_itm.fage:SetText(date_time)
	self.list:AddItem(_itm)
end

function load_save_dialog:ChangeInputLanguage()
	local l = get_input_language()
	set_input_language( bit_not( l ) )
end

local kAlt = { [DIK_keys.DIK_LMENU] = true, [DIK_keys.DIK_RMENU] = true }
local kShift = { [DIK_keys.DIK_LSHIFT] = true, [DIK_keys.DIK_RSHIFT] = true }

function load_save_dialog:OnKeyboard(dik, keyboard_action)  --virtual function
	CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	
	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		if dik == DIK_keys.DIK_ESCAPE then
			self:OnButton_cancel_clicked()
		elseif dik == DIK_keys.DIK_RETURN then
			self:OnButton_load_clicked()
		elseif dik == DIK_keys.DIK_DELETE then
			self:OnButton_del_clicked()
		elseif kAlt[dik] then
			self.alt_pressed = true
			if self.shift_pressed then
				self:ChangeInputLanguage()
			end
		elseif kShift[dik] then
			self.shift_pressed = true
			if self.alt_pressed then
				self:ChangeInputLanguage()
			end
		end
	elseif keyboard_action == ui_events.WINDOW_KEY_RELEASED then
		if kAlt[dik] then
			self.alt_pressed = nil
		elseif kShift[dik] then
			self.shift_pressed = nil
		end
	end
	return true
end



function file_data(fname)
	local f = getFS();
	local flist = f:file_list_open_ex("$game_saves$",bit_or(FS.FS_ListFiles,FS.FS_RootOnly) , fname .. ".sav")
	local f_cnt = flist:Size()
	
	if f_cnt > 0 then
		local file		=	flist:GetAt(0)
		local sg = CSavedGameWrapper(fname)
		
		local y,m,d,h,min,sec,ms = 0,0,0,0,0,0,0
		y,m,d,h,min,sec,ms = sg:game_time():get(y,m,d,h,min,sec,ms)
		
		local date_time = string.format("%02d.%02d.%04d %02d:%02d", d, m, y, h, min)
		local health = string.format("\\nЗдоровье: %d%%", sg:actor_health()*100)
		
		return "Уровень: " .. game.translate_string(sg:level_name()) .. "\\nИгровое время: " .. date_time .. health .. "\\nСохранено: " .. string.gsub(file:ModifDigitOnly(), ":", ".", 2)
	else
		return "no file data"
	end	
end

function file_exist(fname)
	return getFS():exist("$game_saves$", fname) ~= nil
end

function delete_save_game(filename)
	local save_file		= filename .. ".sav"
	local dds_file		= filename .. ".dds"
	
	local f = getFS()
	
	f:file_delete("$game_saves$",save_file)
	
	if file_exist(dds_file) then
		f:file_delete("$game_saves$", dds_file)
	end
end

