-- -*- mode: lua; encoding: windows-1251 -*-
local console = nil
local log_text = "" 	-- то, что будет выводится в лог
local buf_text = "%c[white]::UIConsole v1.0::\\n::Author - naxac::\\n"		-- просто текстовый буфер
local last_commands = {}	-- последние введённые команды
local log_path = getFS():update_path("$logs$", "console.log")
local function to_log(mode)
	if #log_text>0 then
		log_text = log_text:gsub("\\n", "\n")
		local file = io.open(log_path, mode)
		file:write(log_text)
		file:close(file)
		log_text = ""
	end
end
	

local cmd2func = {}
	cmd2func['run'] = function (func_str)
		if func_str==nil or func_str=="" then
			return false, "Incorrect parameters for command: run"
		end
		local res, err = pcall( loadstring( func_str ) )
		return res, ( res and "Successfully!" or "Error: "..err )
	end
	cmd2func['run_func'] = function (str)
		if str==nil or str=="" then
			return false, "Incorrect parameters for command: run_func"
		end
		local func_str, args = string.match(str, "(%S+)%s+(.-)")

		local func = nil

		local m, f = string.match(func_str, "([%w_]+)%.*([%w_]*)")
		if m and _G[m] then
			if type(_G[m]) == "function" then
				func = m
			else
				if f and f~="" and _G[m][f] and type(_G[m][f])=="function" then
					func = m.."."..f
				end
			end
		end

		if func==nil then
			return false, "Function '"..func_str.." not found in _G"
		end

		local result = loadstring("return "..func.."(".. (args or "") ..")")()
		local t = type(result)
		if t == "userdata" then
			if result.name then
				result = result:name()
			else
				result = "userdata"
			end
		elseif t == "table" then
			table.print(result)
			result = "table"
		elseif t ~= "string" then
			result = tostring(result)
		end

		return true, "Execution function: "..func.." -> "..result
	end

	cmd2func['jump_to_level'] = function (level_name)
		local v = nil
		local i = 0
		while GGraph:valid_vertex_id(i) do
			v = GGraph:vertex(i)
			if AI:level_name(v:level_id()) == level_name then
				break
			end
			i = i + 1
		end
		if v == nil then
			return false, "Incorrect parameter for command: jump_to_level"
		end
		xr_s.subscribe("update", ui_console.update_close)
		level.disable_input()
		start_small_timer(2000,
			function()
				level.enable_input()
				level_changers.create_teleport_on_actor(
					v:game_point(),
					v:level_vertex_id(),
					i
				)
			end
		)
		return true, nil
	end
	
	cmd2func['spawn'] = function (section)
		if section==nil or section=="" then
			return false, "Incorrect parameters for command: spawn"
		elseif not sys_ini:section_exist(section) then
			return false, "Unknown section: "..section
		end
		local gv = Actor:game_vertex_id()
		if not GGraph:valid_vertex_id(gv) then
			return false, "Invalid vertex of actor: can't create object"
		end
		local pos = Actor:position():add(Actor:direction():mul(3))
		AI:create(section, pos:add(vector():set(0, 0.5, 0)),
			Actor:level_vertex_id(), gv)
		return true, nil
	end
	
	cmd2func['remove_item'] = function (section)
		if section==nil or section=="" then
			return false, "Incorrect parameters for command: remove_item"
		elseif not sys_ini:section_exist(section) then
			return false, "Unknown section ["..section.."]"
		end
		local obj = Actor:object(section)
		if obj then
			local sobj = AI:object(obj:id())
			if sobj then
				AI:release(sobj, true)
				return true, nil
			else	-- WTF?
				return true, "Object already removed"
			end
		else
			return true, "Actor hasn't object ["..section.."]"
		end
	end
	
	cmd2func['give_item'] = function (str)
		local section, n = string.match(str, "(%S+)%s+(.-)")
		if section==nil or section=="" then
			return false, "Incorrect parameters for command: give_item"
		elseif not sys_ini:section_exist(section) then
			return false, "Unknown section ["..section.."]"
		elseif not sys_ini:line_exist(section, "inv_name") then
			return false, "Incorrect section ["..section.."]"
		end
		local cnt = n and math.ceil(math.abs(tonumber(n) or 1)) or 1
		for i = 1, cnt do
			AI:create(section, vector(), 0, 0, 0)
		end
		_G['from_cheat_menu'] = true
		return true, nil
	end
	
	cmd2func['fwd'] = function (n)
		if n==nil or tonumber(n)==nil then
			return false, "Incorrect parameter for command: forward"
		end
		Actor:set_actor_position(Actor:position():add(Actor:direction():mul(tonumber(n))))
		return true, nil
	end
	
	cmd2func['teleport'] = function (str)
		local x, y, z = string.match(str, "(%S+)%s+(%S+)%s+(%S+)")
		if x==nil or tonumber(x)==nil
			or y==nil or tonumber(y)==nil
			or z==nil or tonumber(z)==nil
		then
			return false, "Incorrect parameters for command: teleport"
		end
		Actor:set_actor_position(vector():set(tonumber(x), tonumber(y), tonumber(z)))
		return true, nil
	end
	
	cmd2func['position'] = function()
		local pos = Actor:position()
		local lv = Actor:level_vertex_id()
		local gv = Actor:game_vertex_id()
		local msg = "X = "..pos.x.."\\nY = "..pos.y.."\\nZ = "..pos.z.."\\nLevel Vertex = "..lv.."\\nGame Vertex = "..gv.."\\nValid = "..tostring(GGraph:valid_vertex_id(gv))
		return true, msg
	end
	
	cmd2func['power'] = function (n)
		if n==nil or tonumber(n)==nil then
			return false, "Incorrect parameter for command: power"
		end
		Actor.power = tonumber(n)
		return true, nil
	end
	
	cmd2func['satiety'] = function (n)
		if n==nil or tonumber(n)==nil then
			return false, "Incorrect parameter for command: satiety"
		end
		Actor.satiety = tonumber(n)
		return true, nil
	end
	
	cmd2func['health'] = function (n)
		if n==nil or tonumber(n)==nil then
			return false, "Incorrect parameter for command: health"
		end
		Actor.health = tonumber(n)
		return true, nil
	end
	
	cmd2func['money'] = function (n)
		if n==nil or tonumber(n)==nil then
			return false, "Incorrect parameter for command: money"
		end
		Actor:give_money(tonumber(n))
		return true, nil
	end
	
	cmd2func['give_info'] = function(info)
		if info==nil or info=="" then
			return false, "Incorrect parameter for command: give_info"
		elseif has_alife_info(info) then
			return false, "Actor already has info:"..info
		end
		Actor:give_info_portion(info)
		return true, nil
	end
	
	cmd2func['disable_info'] = function(info)
		if info==nil or info=="" then
			return false, "Incorrect parameter for command: disable_info"
		elseif not has_alife_info(info) then
			return false, "Actor already hasn't info:"..info
		end
		Actor:disable_info_portion(info)
		return true, nil
	end
	
	cmd2func['help'] = function()
		local ret = ""
		for k in pairs(cmd2func) do
			ret = ret..game.translate_string("ui_console_help_"..k).."\\n"
		end
		ret = ret:sub(1, -3)
		return true, ret
	end
	
	cmd2func['flush'] = function()
		to_log("a")
		return true, "Log file has been saved successfully!"
	end
	
	cmd2func['clear_log'] = function()
		buf_text = "%c[default]Log file has been saved successfully!"
		log_text = "::UIConsole v1.0::\n::Author - naxac::\n\n"
		to_log("w")
		return true, "nolog"
	end
	

class "UIConsole" (CUIScriptWnd)

function UIConsole:__init() super()
	self.last_i = 1
	self.moved = true
	
	self:Init(0, 0, 1024, 768)
	
	local xml = CScriptXmlInit()
	xml:ParseFile("ui_console.xml")
	
	self.back = xml:InitStatic("back", self)
	
	self.bposy = 768
	
	xml:InitFrame("back_frame", self.back)
	local st = xml:InitStatic("eidt_s", self.back)
	st:SetFont(GetFontDI())
	
	self.edit = CUIEditBoxEx()
	self.edit:SetAutoDelete(true)
	self.edit:Init(25, 2, 1020, 22)
	self.edit:SetTextColor(GetARGB(255, 160, 160, 255))
	self.edit:SetFont(GetFontDI())
	self.back:AttachChild(self.edit)
	
	self.scroll_v = xml:InitScrollView("scroll_v", self.back)
	
	self.log = xml:InitStatic("log", nil)
	self.log:SetTextComplexMode(true)
	self.log:SetTextColor(255, 160, 160, 160)
	self.log:SetFont(GetFontDI())
	self.log:SetText(buf_text)
	self.log:AdjustHeightToText()
	
	self.scroll_v:AddWindow(self.log, true)
	self.log:SetAutoDelete(false)
end

function UIConsole:__finalize() end

function UIConsole:EnterCommand()
	local str = self.edit:GetText()
	if #str==0 then return end
	
	local cmd, args = string.match(str, "(%S+)%s+(.-)")
	
	log_text = log_text.."~ "..str.."\n"
	
	self.scroll_v:Clear()
	
	if not table.find(last_commands, str) then
		table.insert(last_commands, str)
		self.last_i = #last_commands
	end

	if cmd2func[cmd] then
		if args=="?" then
			buf_text = "%c[green_blue]"..str.."\\n"..buf_text
			local s = game.translate_string("ui_console_help_"..cmd)
			buf_text = "%c[default]"..s.."\\n"..buf_text
			log_text = log_text..s.."\n"
		else
			local res, msg = cmd2func[cmd](args)
			if res then
				if msg then
					buf_text = "%c[green]"..str.."\\n"..buf_text
					if msg then
						buf_text = "%c[default]"..msg.."\\n"..buf_text
						log_text = log_text..msg.."\n"
					end
				end
			else
				buf_text = "%c[yellow]"..str.."\\n"..buf_text
				if msg then
					buf_text = "%c[red]"..msg.."\\n"..buf_text
					log_text = log_text.."! "..msg.."\n"
				end
			end
		end
	else
		buf_text = "%c[yellow]"..str.."\\n"..buf_text
		buf_text = "%c[red]Unknown command: "..cmd.."\\n"..buf_text
		log_text = log_text.."! Unknown command: "..cmd.."\n"
	end
	
	self.log:SetText(buf_text)
	self.log:AdjustHeightToText()
	self.scroll_v:AddWindow(self.log, true)
	self.log:SetAutoDelete(false)
	
	self.edit:SetText("")
end

function UIConsole:OnQuit()
	to_log("a")
	self:GetHolder():start_stop_menu(self, true)
	console = nil
end

function UIConsole:OnKeyboard(dik, keyboard_action)
	CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	
	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		if  dik == DIK_keys.DIK_ESCAPE or dik == DIK_keys.DIK_F10 then
			if self.moved == nil then
				xr_s.subscribe("update", ui_console.update_close)
				self.moved = true
			end
		elseif dik == DIK_keys.DIK_RETURN then
			self:EnterCommand()
		elseif dik == DIK_keys.DIK_UP then
			if #last_commands>0 then
				self.last_i = math.max(self.last_i-1, 1)
				self.edit:SetText(last_commands[self.last_i])
			end
		elseif dik == DIK_keys.DIK_DOWN then
			if #last_commands>0 then
				self.last_i = math.min(self.last_i+1, #last_commands)
				self.edit:SetText(last_commands[self.last_i])
			end
		end
	end
	return true
end
-------------------------------------------------------------------------------------
function update_close()
	console.bposy = console.bposy + 15
	if console.bposy>=768 then
		xr_s.unsubscribe("update", ui_console.update_close)
		console:OnQuit()
		return
	end
	console.back:SetWndPos(0, console.bposy)
end

function update_show()
	console.bposy = console.bposy - 15
	if console.bposy<=380 then
		xr_s.unsubscribe("update", ui_console.update_show)
		console.moved = nil
		return
	end
	console.back:SetWndPos(0, console.bposy)
end

function show_console()
	if game_options.Console==false then return end
	local fs = getFS()
	if fs:exist(log_path)==nil then
		local p = fs:update_path("$fs_root$", "fsgame.ltx")
		fs:file_copy(p, log_path)
		log_text = "::UIConsole v1.0::\n::Author - naxac::\n\n"
		to_log("w")
	end
	console = ui_console.UIConsole()
	level.start_stop_menu(console, true)
	xr_s.subscribe("update", ui_console.update_show)
end
