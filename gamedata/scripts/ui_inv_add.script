-- -*- mode: lua; encoding: windows-1251 -*-
local edibles = {}		-- всё съедобное, что можно положить в ячейку (секция = true), заполняется из конфига 'misc\inv_add.ltx'
local slot2section = {}	-- то, что находится в ячейках (слот = секция), храним в псторе
local section2slot = {}	-- то, что находится в ячейках (секция = слот)
local slotsKeys = {}	-- клавиши использования предметов (слот = код клавиши)

local wnd = nil

local repkits = {
	['repair_item_outfit'] = function (repkit, item)
		if item:is_outfit() then
			repair_check.repair_repkit(repkit, item)
		end
	end,
	['repair_item_weapon'] = function (repkit, item)
		if item:is_weapon() then
			repair_check.repair_repkit(repkit, item)
		end
	end,
	["acumm"] = function (repkit, item)
		if item:is_torch() then
			bind_torch.charge(repkit, item)
		end
	end
}
local charged_devices = {
	["device_scaner"] = true,
	["teleportator"] = true
}
local info2stop = {
	ui_inventory	= bit_or(1,4),	ui_inventory_hide	= bit_or(2,8),
	ui_pda			= bit_or(1,4),	ui_pda_hide			= bit_or(2,8),
	ui_car_body		= 1, 			ui_car_body_hide	= 2,
}

function inventory_open()
	if not wnd then	
		wnd = InvWnd(level.main_input_receiver())
	end
end

function inventory_close()
	if wnd then
		wnd:DetachWnd()
		wnd = nil
		amk.save_table("quick_slots", slot2section)
	end
end

function on_info(info_id)
	local b = info2stop[info_id]
	if b then
		if bit_and(b, 1)==1 then
			bind_stalker.hide_weapon("inv")
		elseif bit_and(b, 2)==2 then
			bind_stalker.restore_weapon("inv")
			_G['recolor_items'] = nil
		end
		if bit_and(b, 4)==4 then
			xr_actor.change_move("info", false)
		elseif bit_and(b, 8)==8 then
			xr_actor.change_move("info", true)
		end
	end
end

class "InvWnd" (CUIScriptWnd)

local reg_callbacks = {
--	cell_item_select = "on_item_select",
	cell_item_clicked = "on_item_select",
	item_drop = "on_item_drop",
	item_take = "on_item_take",
	drag_drop = "on_drag_drop",
	update = "on_update"
}

function InvWnd:__init(owner) super()
	self.owner = owner
	self:Init(0, 0, 1024, 768)
	self:InitControls()
	for k,v in pairs(reg_callbacks) do
		xr_s.subscribe( k, self[v], {self = self} )
	end
end

function InvWnd:__finalize() end

function InvWnd:InitControls()
	self.stat = CUIStatic()
	self.stat:Init(0, 0, 1024, 768)
	self.owner:AttachChild(self.stat)
	self.stat:Show(true)

	local xml = CScriptXmlInit()
	xml:ParseFile("ui_inv_add.xml")

	self.slots = {}
	for i=1,4 do
		local s = xml:InitStatic("slot"..i, self.stat)
		self.slots[i] = s
		s:InitTexture("ui_slot_h")
		s:SetStretchTexture(true)
		s:SetColor(GetARGB(0, 255, 255, 255))
		
		s.icn = xml:InitStatic("slot_icon", s)
		s.icn:InitTexture("ui\\ui_icon_equipment")
		s.icn:SetStretchTexture(true)
		
		s.key = xml:InitStatic("slot_key", s)
		s.key:SetText(hotkeys.dik2key(slotsKeys[i]) or "")
		s.key:SetFont(GetFontSmall())
		
		local name = "qslot_"..i
		self:Register(s, name)
		self:AddCallbackEx(name, ui_events.STATIC_FOCUS_RECEIVED, self.qslot_focus, i)
		self:AddCallbackEx(name, ui_events.STATIC_FOCUS_LOST, self.qslot_focus_lost, i)
		self:AddCallbackEx(name, ui_events.WINDOW_LBUTTON_DB_CLICK, self.qslot_dbclick, i)
		
		self:DrawSlotIcon(i)
	end

	local st, name
	local slts = { inventory_slots.PISTOL, inventory_slots.RIFLE }
	for i, j in ipairs( slts ) do
		name = "wpn_slot_"..j
		st = xml:InitStatic(name, self.stat)
		self:Register(st, name)
		self:AddCallbackEx(name, ui_events.STATIC_FOCUS_RECEIVED, self.wpn_slot_focus, j)
		self:AddCallbackEx(name, ui_events.STATIC_FOCUS_LOST, self.wpn_slot_focus_lost, j)
	end

	self.rad_level = xml:InitStatic("rad_level", self.stat)
	self.radX = self.rad_level:GetHPos()
	self.radY = self.rad_level:GetVPos()
	self.rad_max_height = self.rad_level:GetHeight()
	if arc_inventory.IsRadDetected() then
		local h = self.rad_max_height * arc_radiation.get_rad_dose() / arc_radiation.get_deadly_dose()
		self.rad_level:SetHeight( h )
		self.rad_level:SetWndPos( self.radX, self.radY + self.rad_max_height - h )
	else
		self.rad_level:SetHeight( 0 )
	end
	self.rad_upd_time = 0

	self.DescrWnd = ui_inv_descr.CUIDescriptionWnd(self.stat)
end

function InvWnd:qslot_focus(i)
	local sect = slot2section[i]
	if sect~="" then
		local obj = db.actor:object(sect)
		if obj then
			self.DescrWnd:OnItemFocus(obj)
		end
	end
	self.quick_slot = i
	self.slots[i]:SetColor(GetARGB(45, 255, 255, 255))
end
function InvWnd:qslot_focus_lost(i)
	if i == self.quick_slot then
		local sect = slot2section[i]
		if sect~="" then
			local obj = db.actor:object(sect)
			if obj then
				self.DescrWnd:OnItemFocusLost(obj)
			end
		end
		self.quick_slot = nil
	end
	self.slots[i]:SetColor(GetARGB(0, 255, 255, 255))
end
function InvWnd:qslot_dbclick(i)
	local sect = slot2section[i]
	local obj = db.actor:object(sect)
	if obj then
		if amk_utils.inventory_search(sect, 2) == false then
			self.DescrWnd:OnItemFocusLost(obj)
		end
		db.actor:eat(obj)
	end
end

function InvWnd:wpn_slot_focus(n)
	self.wpn_slot = n
end
function InvWnd:wpn_slot_focus_lost(n)
	if n == self.wpn_slot then
		self.wpn_slot = nil
	end
end

function InvWnd:on_drag_drop(drag_item, drop_on_item)
	local section = drag_item:section()
	if drop_on_item then
		if repkits[section] then
			repkits[section](drag_item, drop_on_item)
		elseif charged_devices[drop_on_item:section()] and drag_item:is_artefact() then
			this.charge_device(drag_item, drop_on_item)
		end
	else
		if self.quick_slot and edibles[section] then
			-- Проверим, вдруг этот предмет уже есть в какой-то из ячеек
			local n = section2slot[section]
			if n then
				if n == self.quick_slot then	-- в той же самой ячейке, ничего не делаем
					return
				end
				-- не в той, над которой отпустили клавишу
				-- очищаем слот
				slot2section[n] = ""
				self:DrawSlotIcon(n)
			end
			-- удаляем из таблицы старый предмет
			section2slot[slot2section[self.quick_slot]] = nil
			-- Записываем новую секцию, обновляем иконку
			section2slot[section] = self.quick_slot
			slot2section[self.quick_slot] = section
			self:DrawSlotIcon(self.quick_slot)
		end
	end

	if self.wpn_slot and isMagazinedWeapon( drag_item ) then
		local item_slot = drag_item:get_slot()
		if item_slot ~= inventory_slots.PISTOL and item_slot ~= inventory_slots.RIFLE then return end
		if self.wpn_slot == item_slot then return end

		local forced_move = false
		if db.actor:is_in_slot( drag_item ) then
			db.actor:move_to_ruck( drag_item )
			forced_move = true
		end

		local item_in_slot = db.actor:item_in_slot( self.wpn_slot )
		if item_in_slot then
			db.actor:move_to_ruck( item_in_slot )
			forced_move = true
		end

		drag_item:set_slot( self.wpn_slot )
		
		if forced_move then db.actor:move_to_slot( drag_item ) end
	end
end

function InvWnd:DrawSlotIcon(n)
	local s = self.slots[n]
	local sect = slot2section[n]
	local sz = GetIconParams(sect)
	
	s.icn:SetOriginalRect(sz.x, sz.y, sz.w, sz.h)
	if sect~="" and db.actor:object(sect)~=nil then
		s.icn:SetColor(GetARGB(255, 255, 255, 255))
	else
		s.icn:SetColor(GetARGB(70, 200, 200, 200))
	end
end

function InvWnd:DetachWnd()
	for k,v in pairs(reg_callbacks) do
		xr_s.unsubscribe(k, self[v])
	end
	self:unregister_self()
	self.DescrWnd:Remove()
	if self.skat_panel then self.skat_panel:Remove() end
	self.owner:DetachChild(self.stat)
end

function InvWnd:ShowSkatPanel(section)
	if not self.skat_panel then
		self.skat_panel = ui_skat_input.UISkatInputPanel(self.stat, section)
	else
		self.skat_panel:CheckWnd(section)
		self.skat_panel:ShowWnd()
	end
end
function InvWnd:HideSkatPanel()
	if self.skat_panel then self.skat_panel:Hide() end
end
------------------------------------------------------------------------------------------
function InvWnd:on_item_take(item)
	local sect = item:section()
	-- получили первый предмет из ячейки при открытом инвентаре
	if section2slot[sect] and amk_utils.inventory_search(sect, 2)==false then
		self.slots[section2slot[sect]].icn:SetColor(GetARGB(255, 255, 255, 255))
	end
end
function InvWnd:on_item_drop(item)
	local sect = item:section()
	-- использовали последний предмет из ячейки при открытом инвентаре
	if section2slot[sect] and amk_utils.inventory_search(sect)==false then
		self.slots[section2slot[sect]].icn:SetColor(GetARGB(70, 200, 200, 200))
	end
end

-- Выделение предмета в инвентаре
function InvWnd:on_item_select( item )
	if db.actor:is_in_slot( item ) then
		local sect = item:section()
		if sect:find( "exo_mil_exoskeleton_add" ) then
			self:ShowSkatPanel( sect )
		end
	end
end

function InvWnd:on_update( delta )
	self.rad_upd_time = self.rad_upd_time + delta
	if self.rad_upd_time > 1000 then
		self.rad_upd_time = 0
		if arc_inventory.IsRadDetected() then
			local h = self.rad_max_height * arc_radiation.get_rad_dose() / arc_radiation.get_deadly_dose()
			self.rad_level:SetHeight( h )
			self.rad_level:SetWndPos( self.radX, self.radY + self.rad_max_height - h )
		else
			self.rad_level:SetHeight( 0 )
		end
	end
end
--------------------------------------------------------------------------------------------------

-- Чтобы не было глюков при продаже неписям
function restore_slot( item )
	if isMagazinedWeapon( item ) and alife():object( item:id() ) then
		local slot = item:get_slot()
		local ini_slot = sys_ini:r_u32( item:section(), "slot" )
		if ini_slot ~= slot then
			item:set_slot( ini_slot )
		end
	end
end

function slot_fix( id, item )
	local slot = item:get_slot()
	item:set_slot( inventory_slots.PISTOL + inventory_slots.RIFLE - slot )
	db.actor:move_to_slot( item )
end

-- Кастомная заливка предметов в слотах, как в старых билдах
-- + шкала состояния на иконках оружия, брони, фонарика и ПНВ
function on_create_cell_item( item )
	local st = CUIFrameWindow():GetTitleStatic()
	if not st then return end

	if recolor_items and ( db.actor:is_in_slot( item ) or db.actor:is_on_belt( item ) ) then
		st:SetColor( GetARGB(255,150,255,150) )
	end
	-- рисуем шкалу состояния
	if is_cond_item( item ) then
		local h = sys_ini:r_u32( item:section(), "inv_grid_height" ) *35
		local w = 30 * kScreen
		local cond = item:condition()
		local w_cond = w * cond
		local b = CUIStatic()
		b:SetAutoDelete( true )
		b:Init( "ui_mg_progress_efficiency_full_1", 2, h-6, w, 4 )
		b:SetStretchTexture( true)
		st:AttachChild( b )
		local s = CUIStatic()
		s:SetAutoDelete( true )
		s:Init( "ui_mg_progress_efficiency_full_1", 0, 0, w_cond, 4 )
		s:SetStretchTexture( true )
		local g = math.min( cond*510, 255 )
		local r = math.min( (1-cond)*510, 255 )
		s:SetColor( GetARGB( 255, r, g, 50 ) )
		b:AttachChild( s )
	end
end
------------------------------------------------------------------------------------------
-- from ui_mm_opt_main
function on_options_change()
	start_small_timer(300, function()
		slotsKeys[1] = bind_to_dik(key_bindings.kUSE_MEDKIT)
		slotsKeys[2] = bind_to_dik(key_bindings.kUSE_BANDAGE)
		slotsKeys[3] = bind_to_dik(key_bindings.kEXT_1)
		slotsKeys[4] = bind_to_dik(key_bindings.kCAM_4)
	end)
end
------------------------------------------------------------------------------------------
function getSlots() return slot2section end
------------------------------------------------------------------------------------------
function show_inv_msg( text )
	if wnd then
		wnd.DescrWnd:HideDescription()
		BlockUIDescr( true )
	end
	start_small_timer( 200, ShowAutohideMsg, text, 3000 )
end
------------------------------------------------------------------------------------------
function charge_device( art, device )
	local power = art_hit.get_art_power( art:section() )
	if power == 0 then return end

	local cond = device:condition()
	if cond > 0.96 then
		ui_inv_add.show_inv_msg("Прибор не требует зарядки")
		return
	end

	local k = ( 3 - level.get_game_difficulty() ) / 10
	local add_power = power + power*k
	local new_cond = math.min( cond + add_power, 1 )
	device:set_condition( new_cond )
	netpk:modify( alife():object( device:id() ), { condition = new_cond }, netpk.fState )

	local obj = alife():object( art:id() )
	if obj then alife():release( obj, true ) end
	zvuki.use_snd("art")

	local rem = cond + add_power - 1
	if rem > 0 then
		alife():create( "af_buliz", vector():set(0,0,0), 0, 0, 0 )
	end
end
------------------------------------------------------------------------------------------
function on_net_spawn()
	-- Заполняем таблицы
	-- съедобное - несъедобное
	local ini = ini_file("misc\\inv_add.ltx")
	local res,id,val
	for i = 0, ini:line_count("edibles")-1 do
		res,id,val = ini:r_line("edibles",i,"","")
		edibles[id] = true
	end
	-- то, что в слотах
	slot2section = amk.load_table("quick_slots")
	if #slot2section==0 then
		for i = 1, 4 do
			slot2section[i] = ini:r_string("def_slots", "slot_"..i)
		end
	end
	for i,s in ipairs(slot2section) do
		if s~="" then section2slot[s] = i end
	end
	-- клавиши
	slotsKeys = {
		[1] = bind_to_dik(key_bindings.kUSE_MEDKIT),
		[2] = bind_to_dik(key_bindings.kUSE_BANDAGE),
		[3] = bind_to_dik(key_bindings.kEXT_1),
		[4] = bind_to_dik(key_bindings.kCAM_4)
	}
end

function attach()
	xr_s.subscribe("net_spawn", this.on_net_spawn, { once = true} )
	xr_s.subscribe("inventory_open", this.inventory_open)
	xr_s.subscribe("inventory_close", this.inventory_close)
	xr_s.subscribe("info", this.on_info)
	xr_s.subscribe("item_drop", this.restore_slot)
	xr_s.subscribe("cell_item_create", this.on_create_cell_item)
end


