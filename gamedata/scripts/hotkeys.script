-- -*- mode: lua; encoding: windows-1251 -*-

local get_wnd = level.main_input_receiver
local binds_actions = {}
local dik_actions = {}

local keys = {
	[1]		= 'ESCAPE',	[21]	= 'Y',			[41]	= 'GRAVE',		[61]	= 'F3',			[81]	= 'NUMPAD3',		[151]	= 'UNLABELED',		[221] = 'APPS',
	[2]		= '1',		[22]	= 'U',			[42]	= 'LSHIFT',		[62]	= 'F4',			[82]	= 'NUMPAD0',		[156]	= 'NUMPADENTER',	[337] = 'MOUSE1',
	[3]		= '2',		[23]	= 'I',			[43]	= 'BACKSLASH',	[63]	= 'F5',			[83]	= 'DECIMAL',		[157]	= 'RCONTROL',		[338] = 'MOUSE2',
	[4]		= '3',		[24]	= 'O',			[44]	= 'Z',			[64]	= 'F6',			[87]	= 'F11',			[179]	= 'NUMPADCOMMA',	
	[5]		= '4',		[25]	= 'P',			[45]	= 'X',			[65]	= 'F7',			[88]	= 'F12',			[181]	= 'DIVIDE',			
	[6]		= '5',		[26]	= 'LBRACKET',	[46]	= 'C',			[66]	= 'F8',			[100]	= 'F13',			[183]	= 'SYSRQ',			
	[7]		= '6',		[27]	= 'RBRACKET',	[47]	= 'V',			[67]	= 'F9',			[101]	= 'F14',			[184]	= 'RMENU',	
	[8]		= '7',		[28]	= 'RETURN',		[48]	= 'B',			[68]	= 'F10',		[102]	= 'F15',			[197]	= 'PAUSE',	
	[9]		= '8',		[29]	= 'LCONTROL',	[49]	= 'N',			[69]	= 'NUMLOCK',	[112]	= 'KANA',			[199]	= 'HOME',
	[10]	= '9',		[30]	= 'A',			[50]	= 'M',			[70]	= 'SCROLL',		[121]	= 'CONVERT',		[200]	= 'UP',
	[11]	= '0',		[31]	= 'S',			[51]	= 'COMMA',		[71]	= 'NUMPAD7',	[123]	= 'NOCONVERT',		[201]	= 'PRIOR',
	[12]	= 'MINUS',	[32]	= 'D',			[52]	= 'PERIOD',		[72]	= 'NUMPAD8',	[125]	= 'YEN',			[203]	= 'LEFT',
	[13]	= 'EQUALS',	[33]	= 'F',			[53]	= 'SLASH',		[73]	= 'NUMPAD9',	[141]	= 'NUMPADEQUALS',	[205]	= 'RIGHT',
	[14]	= 'BACK',	[34]	= 'G',			[54]	= 'RSHIFT',		[74]	= 'SUBTRACT',	[144]	= 'CIRCUMFLEX',		[207]	= 'END',
	[15]	= 'TAB',	[35]	= 'H',			[55]	= 'MULTIPLY',	[75]	= 'NUMPAD4',	[145]	= 'AT',				[208]	= 'DOWN',
	[16]	= 'Q',		[36]	= 'J',			[56]	= 'LMENU',		[76]	= 'NUMPAD5',	[146]	= 'COLON',			[209]	= 'NEXT',
	[17]	= 'W',		[37]	= 'K',			[57]	= 'SPACE',		[77]	= 'NUMPAD6',	[147]	= 'UNDERLINE',		[210]	= 'INSERT',
	[18]	= 'E',		[38]	= 'L',			[58]	= 'CAPITAL',	[78]	= 'ADD',		[148]	= 'KANJI',			[211]	= 'DELETE',
	[19]	= 'R',		[39]	= 'SEMICOLON',	[59]	= 'F1',			[79]	= 'NUMPAD1',	[149]	= 'STOP',			[219]	= 'LWIN',
	[20]	= 'T',		[40]	= 'APOSTROPHE',	[60]	= 'F2',			[80]	= 'NUMPAD2',	[150]	= 'AX',				[220]	= 'RWIN'
}

function bind2key(bind)
	return keys[bind_to_dik(bind)]
end
function dik2key(dik)
	return keys[dik]
end

-- фикс смены типа гранаты
local grenades = {
	"grenade_rgd5",
	"grenade_f1",
	"grenade_f1_double",
	"grenade_m61",
	"grenade_7643b",
	"grenade_he",
	"grenade_sg",
	"grenade_fb",
	"grenade_gd-05",
	"grenade_flash"
}
local sect2pos = {}
for i, v in ipairs(grenades) do
	sect2pos[v] = i
end

function switch_grenade()
	local a = db.actor
	if not a:alive() then return end
	if a:active_slot() ~= inventory_slots.GRENADE then return end

	local itm = a:item_in_slot( inventory_slots.GRENADE )
	if itm == nil then
		for k,v in pairs( grenades ) do
			itm = a:object(v)
			if itm then
				a:move_to_slot_and_activate( itm )
				break
			end
		end
		return
	end

	local sect = itm:section()
	local pos = sect2pos[sect]
	ASSERT( pos, "%s:grenade_change : unregistered grenade section [%s]", script_name(), sect )
	local n = #grenades
	for i = pos, pos + n - 2 do
		local j = math.fmod( i, n ) + 1
		local gr = a:object( grenades[j] )
		if gr then
			a:move_to_ruck( itm )
			a:move_to_slot_and_activate( gr )
			break
		end
	end
end

function use_from_slot(n)
	if not db.actor:alive() then return end

	local slots = ui_inv_add.getSlots()
	local s = slots[n]
	if s then
		local item = db.actor:object(s)
		if item then
			db.actor:eat(item)
			show_use_item(s)
		end
	end
end

function show_use_item(section)
	local st = get_hud():AddCustomStatic( "item_used", true )
	st:wnd():SetText( "Использовано: "..game.translate_string( get_inv_name( section ) ) )
	st.m_endTime = time_global()/1000 + 4
end


-- Групповой перенос предметов в/из нычки/трупа
local carbody_addons, used_box
local reg_callbacks = {
	item_take = "on_item_take",
	item_drop = "on_item_drop"
}

function car_body_open()
	carbody_addons = CUICarbodyAddons(get_wnd(), used_box)
end

function car_body_close()
	carbody_addons:Remove()
	carbody_addons = nil
	used_box = nil
end

function on_use(obj, who)
	if not ( ( IsMonster(obj) or IsStalker(obj) ) and ShiftPressed() ) then
		_G['recolor_items'] = true
	end
	used_box = obj
end

function clear_used_box()
	used_box = nil
	_G['recolor_items'] = nil
end
	
-------------------------
class "CUICarbodyAddons" (CUIScriptWnd)

function CUICarbodyAddons:__init(owner, used_box) super()
	self.owner = owner
	self.used_box = used_box
	self:InitControls()
	self:Show(true)
	for k,v in pairs(reg_callbacks) do
		xr_s.subscribe(k, self[v], {self = self} )
	end
end

function CUICarbodyAddons:InitControls()
	self:Init(0,0,1024,768)
	self:Enable(true)

	local xml = CScriptXmlInit()
	xml:ParseFile("carbody_addons.xml")
	self:Register(xml:Init3tButton("move_btn", self), "move_btn")
	self.owner:AttachChild(self)
	self:AddCallbackEx("move_btn", ui_events.BUTTON_CLICKED, self.move_items)
	
	if self.used_box:clsid()==clsid.inventory_box then
		self:Register(xml:Init3tButton("repack_btn", self), "repack_btn")
		self:AddCallbackEx("repack_btn", ui_events.BUTTON_CLICKED, self.repack_ammo)
	end
	
	self.DescrWnd = ui_inv_descr.CUIDescriptionWnd(self)
end

function CUICarbodyAddons:repack_ammo()
	dunin_ammo.repack_in_box(self.used_box)
end

function CUICarbodyAddons:Remove()
	self.DescrWnd:Remove()
	self:unregister_self()
	self.owner:DetachChild(self)
	for k,v in pairs(reg_callbacks) do
		xr_s.unsubscribe(k, self[v])
	end
	akill.check_habar_in_box1(used_box)
end

function CUICarbodyAddons:move_items()
	local box = self.used_box
	local actor = db.actor
	if self.droped_section then
		actor:iterate_inventory(function (dummy, item)
			if item:section() == self.droped_section then
				actor:transfer_item(item, box)
			end 
		end, nil)

	elseif self.taken_section then
		if box:clsid()==clsid.inventory_box then
			local item
			for i=0, box:inv_box_count()-1 do
				item = box:object_from_inv_box(i)
				if item:section() == self.taken_section then
					box:transfer_item(item, actor)
				end
			end
		else
			box:iterate_inventory(function (dummy, item)
				if item:section() == self.taken_section then
					box:transfer_item(item, actor)
				end 
			end, nil)
		end
	end

	self.droped_section = nil
	self.taken_section = nil
end

function CUICarbodyAddons:on_item_drop(obj)
	local s = obj:section()
	if s == "separator" then return end

	local sobj = alife():object(obj:id())
	if sobj and sobj.parent_id == 0 then return end

	self.droped_section = s
	self.taken_section = nil
end

function CUICarbodyAddons:on_item_take(obj)
	local s = obj:section()
	if s == "separator" then return end

	local outfit = db.actor:item_in_slot( inventory_slots.OUTFIT )
	if outfit and outfit:id() == obj:id() then return end

	self.taken_section = s
	self.droped_section = nil
end


-- Поломка и износ холодного оружия
local time_shift = time_global()
local wpn_power	= {
	['wpn_kuvalda']	= true,
	['wpn_crowbar']	= true,
	['wpn_topor']	= true,
	['wpn_machete'] = true,
	['wpn_kukri']	= true
}
function steel_arms()
	local actor = db.actor
	if not actor:alive() then return end
	if actor:active_slot() ~= inventory_slots.KNIFE then return end
	if time_shift > time_global() then return end
	
	local wpn = actor:active_item()
	if wpn == nil then return end
	-- длительность анимации получить нельзя - будем считать "на глаз"
	time_shift = time_global() + 750
	
	local sec = wpn:section()
	-- Усталость от махания железякой
	-- все ножи не проверяем, только самое тяжелое
	local dif = level.get_game_difficulty() + 1
	if wpn_power[sec] then
		actor.power = - dif * wpn:get_weight() * 0.01
	end
	
	if level.get_target_dist() + 0.2 > sys_ini:r_float(sec, "fire_distance") then return end
	
	local d = sys_ini:r_float(sec, "condition_shot_dec")
	local cond = wpn:condition() - dif * d
	wpn:set_condition(cond)
	if cond < 0.05 then
		start_small_timer(200, function() kostya_dialog.remove_wpn(wpn:id()) end)
	end
end
-- runner/returner
function run_or_return()
	if not db.actor:alive() then return end
	if ShiftPressed() then
		this.set_input_key()
	elseif inventory.on_belt("runner_tele") then
		fly.runner()
	else
		fly.returner()
	end
end
function set_input_key()
	if get_wnd() then level.start_stop_menu( get_wnd(), true ) end
	local msg = "Будет произведена настройка клавиши возвращателя/ускорителя.\\nДля продолжения нажмите \"Да\", а затем назначаемую клавишу.\\nДля отмены нажмите \"Нет\"."
	local func_yes = function()
		xr_s.subscribe( "key_press", this.wait_key, { once = true } )
	end
	ui_messagebox_new.UIMessageBox( "yes_no_alarm", msg, func_yes )
end
function wait_key( dik, bind )
	dik_actions[game_options.RunnerKey] = nil
	dik_actions[dik] = hotkeys.run_or_return
	game_options.RunnerKey = dik
	game_options.save_game_options()
	local dik_name = this.dik2key( dik )
	local msg = "На управление возвращателем/ускорителем назначена клавиша "..dik_name..".\\nДля изменения клавиши нажмите Shift + "..dik_name.."."
	ui_messagebox_new.UIMessageBox( "ok_info", msg )
end
------------------------------
binds_actions[key_bindings.kWPN_FIRE] = hotkeys.steel_arms
binds_actions[key_bindings.kWPN_ZOOM] = hotkeys.steel_arms
binds_actions[key_bindings.kWPN_NEXT] = hotkeys.switch_grenade
binds_actions[key_bindings.kNIGHT_VISION] = function()
	if not db.actor:alive() then return end
	nightvision.switch_pnv()
end
binds_actions[key_bindings.kUSE_BANDAGE] = function() use_from_slot(2) end
binds_actions[key_bindings.kUSE_MEDKIT] = function() use_from_slot(1) end
binds_actions[key_bindings.kEXT_1] = function() use_from_slot(3) end
binds_actions[key_bindings.kCAM_4] = function() use_from_slot(4) end
binds_actions[key_bindings.kQUICK_SAVE] = function()
	u3_utils.on_quicksave()
end
binds_actions[key_bindings.kQUICK_LOAD] = function()
	u3_utils.load_quicksave()
end
binds_actions[key_bindings.kSCORES] = function()
	if not db.actor:alive() then return end
	if device():is_paused() then return end
	reminder.start_remind()
	arc_ui_dosimeter.show()
end
binds_actions[key_bindings.kTORCH] = function()
	if not db.actor:alive() then return end
	if db.actor:item_in_slot( inventory_slots.TORCH ) then
		local snd = xr_sound.get_safe_sound_object("zwuk\\inv_torch")
		snd:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 0.7)
	end
end

dik_actions[game_options.RunnerKey] = hotkeys.run_or_return
dik_actions[DIK_keys.DIK_F10] = function() ui_console.show_console() end

function on_key(dik, bind)
	if get_wnd()~=nil then return end
	
	if binds_actions[bind] then
		binds_actions[bind]()
	end
	if dik_actions[dik] then
		dik_actions[dik]()
	end
end

function attach()
	xr_s.subscribe("car_body_open", this.car_body_open)
	xr_s.subscribe("car_body_close", this.car_body_close)
	xr_s.subscribe("key_press", this.on_key)
end
