-- -*- mode: lua; encoding: windows-1251 -*-
-- File:        UI_SAVE_DIALOG.SCRIPT
-- Description: Save Dialog for STALKER
-- Created:     27.9.2004
-- Author:      Serhiy Vynnychenko (narrator@gsc-game.kiev.ua)
-- Copyright:   2004 GSC Game World
-- Version:     0.8

class "save_item" (CUIListItemEx)

function save_item:__init() super()
	self:SetWndRect		(0,0,430,22)
	
	self.fn					= CUIStatic	()
	self.fn:SetAutoDelete	(true)
	self:AttachChild		(self.fn)
	self.fn:SetWndRect		(1,1,230,20)
	self.fn:SetTextColor	(0,0,0,0)

	self.tx					= CUIStatic	()
	self.tx:SetAutoDelete	(true)
	self:AttachChild		(self.tx)
	self.tx:SetWndRect		(1,1,230,20)
	self.tx:SetFont			(GetFontLetterica18Russian())
	self.tx:SetTextColor	(255,216,186,140)

	self.fage				= CUIStatic	()
	self.fage:SetAutoDelete	(true)
	self:AttachChild		(self.fage)
	self.fage:SetWndRect	(320,1,150,20)
	self.fage:SetFont		(GetFontLetterica16Russian())
	self.fage:SetTextColor	(255,216,186,140)
end


class "save_dialog" (CUIScriptWnd)

function save_dialog:__init() super()		
	self:InitControls()
	self:InitCallBacks()
	self:FillList()
end

function save_dialog:__finalize()

end

function save_dialog:FillList()
	local flist = getFS():file_list_open_ex("$game_saves$",FS.FS_ListFiles,"*.sav")
	local f_cnt = flist:Size()
	
	flist:Sort(FS.FS_sort_by_modif_down)
	
	local file, file_name, date_time
	for	it=0, f_cnt-1 	do
		file		=	flist:GetAt(it)			
		file_name = string.sub(file:NameFull(), 0, -5)
		date_time = "[" .. file:ModifDigitOnly() .. "]"
		self:AddItemToList(file_name, date_time)
	end
end

function save_dialog:InitControls()
	self:Init(0,0,1024,768)

	local xml = CScriptXmlInit()
	xml:ParseFile("ui_mm_save_dlg.xml")
	
	xml:InitStatic("background",				self)
	local form = xml:InitStatic("form",			self)
	
	xml:InitStatic("form:caption",				form)
	
	self.edit_filename = self:InitEditBoxEx(form, 86, 55, 443)
	
	xml:InitFrame("form:list_frame",			form)

	self.list_files = xml:InitList("form:list", 			form)
	self.list_files:ShowSelectedItem(true)
	self:Register(self.list_files, "list_window")

	local ctrl = xml:Init3tButton("form:btn_save",	form)	
	self:Register(ctrl, "button_ok")

	ctrl = xml:Init3tButton("form:btn_delete",	form)	
	self:Register(ctrl, "button_del")
	
	ctrl = xml:Init3tButton("form:btn_cancel",	form)
	self:Register(ctrl, "button_cancel")	
	
	self.message_box = CUIMessageBoxEx()
	self:Register(self.message_box,"message_box")

	self.mbox_mode	= 0	
end

function save_dialog:InitCallBacks()
    -- main frame buttons
	self:AddCallbackEx("button_ok",     ui_events.BUTTON_CLICKED, 			self.OnButton_ok_clicked)
	self:AddCallbackEx("button_cancel", ui_events.BUTTON_CLICKED, 			self.OnButton_cancel_clicked)
	self:AddCallbackEx("button_del",	  ui_events.BUTTON_CLICKED,             self.OnButton_del_clicked)

	self:AddCallbackEx("message_box", ui_events.MESSAGE_BOX_YES_CLICKED,		self.OnMsgYes)
	self:AddCallbackEx("list_window", ui_events.LIST_ITEM_CLICKED, 			self.OnListItemClicked)
end

function save_dialog:OnListItemClicked()
	if self.list_files:GetSize()==0 then return end

	local item_id		= self.list_files:GetFocusedItem()
	if item_id==nil or item_id==-1 then return end
	local item			= self.list_files:GetItem(item_id)
	
	if item==nil then return end
	
	local item_text		= item.fn:GetText()
	self.edit_filename:SetText	(item_text)
end

function save_dialog:OnMsgYes()
	if self.mbox_mode == 1 then
		self:SaveFile(self.new_save)
		self:OnButton_cancel_clicked()
		
	elseif self.mbox_mode == 2 then
		self:delete_selected_file()
	end	
end

function save_dialog:OnButton_del_clicked()
	if self.list_files:GetSize()==0 then return end

	local index		= self.list_files:GetSelectedItem	()
	
	if index == -1 then return end

	self.mbox_mode = 2
	self.message_box:Init("message_box_delete_file_name")		
	self:GetHolder():start_stop_menu(self.message_box, true)
end

function save_dialog:delete_selected_file()
	if self.list_files:GetSize()==0 then return end
	local index		= self.list_files:GetSelectedItem	()
	
	if index == -1 then return end

	local item				= self.list_files:GetItem(index)
	if item==nil then return end
	local filename			= item.fn:GetText()
	
	ui_load_dialog.delete_save_game(filename)
	
	self.list_files:RemoveItem			(index)
	self:OnListItemClicked	()
end

function save_dialog:OnButton_ok_clicked()
	-- Get file name
	self.new_save		= self.edit_filename:GetText()
	self.new_save		= self.new_save:clear():trim()
	
	--// check for empty name
	if string.len(self.new_save) == 0 then
		self.mbox_mode = 0
		self.message_box:Init("message_box_empty_file_name")		
		self:GetHolder():start_stop_menu(self.message_box, true)
		return
	end
	
	--// check for match name
	local f = getFS()
--	local flist = f:file_list_open("$game_saves$",FS.FS_ListFiles)
	local file_struct = f:exist("$game_saves$", self.new_save .. ".sav" )

	if file_struct ~= nil then
		self.mbox_mode = 1
		self.message_box:Init("message_box_file_already_exist")
		self:GetHolder():start_stop_menu(self.message_box, true)
		
--		flist:Free()
		return
	end
--	flist:Free()	
	self:SaveFile(self.new_save)
	self:OnButton_cancel_clicked()
end

function save_dialog:OnButton_cancel_clicked()
	self:unregister_self()
	self:GetHolder():start_stop_menu	(self.owner, true) --new
	self:GetHolder():start_stop_menu	(self,true)
	self.owner:Show						(true)
end

function save_dialog:OnKeyboard(dik, keyboard_action)  --virtual function
	CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)

	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		if dik == DIK_keys.DIK_RETURN then
			self:OnButton_ok_clicked()
		elseif dik == DIK_keys.DIK_DELETE then
			self:OnButton_del_clicked()
		elseif dik == DIK_keys.DIK_ESCAPE then
			self:OnButton_cancel_clicked()
		end
	end
	return true
end

function save_dialog:AddItemToList(file_name, date_time)	
	local _itm			= save_item()
	_itm.fn:SetText		(file_name)
	if #file_name>50 then file_name = file_name:sub(1,48)..'...' end
	_itm.tx:SetText		(file_name)
	_itm.fage:SetText	(date_time)
	self.list_files:AddItem	(_itm)
end

function save_dialog:SaveFile(fileName)
	if nil~= fileName then
		local console = get_console()
		console:execute("save " .. fileName)
	end
end

