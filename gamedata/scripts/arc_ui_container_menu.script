-- -*- mode: lua; encoding: windows-1251 -*-
class "arc_container_menu" (CUIScriptWnd)

local max_arts_in_container = nil
-- Настройки меню
local menu_cfg = {
	[1] = {
		take = { row_size = 1, x_start = 140, y_start = 137, space = 69 },
		put = { row_size = 5, x_start = 30, y_start = 280, space = 60 },
		cont = {30,40,300,280},
		texture = "ui\\ui_arc_art_box_1basic"
	},
	[3] = {
		take = { row_size = 3, x_start = 80, y_start = 130, space = 66 },
		put = { row_size = 5, x_start = 30, y_start = 280, space = 60 },
		cont = {30,40,300,200},
		texture = "ui\\ui_arc_art_box_basic"
	},
	[8] = {
		take = { row_size = 4, x_start = 77, y_start = 112, space = 54 },
		put = { row_size = 5, x_start = 30, y_start = 280,  space = 60 },
		cont = {25,35,310,310},
		texture = "ui\\ui_arc_art_box_8basic"
	}
}
	

local container_arts
local arts_cont

local inventory_arts
local arts_inv

local _menu

local cur_cont_index

function show_menu(cont_index)
	cur_cont_index = cont_index
	max_arts_in_container = arc_containers.get_container_slots(cur_cont_index)
	arc_containers.set_menu_showed(true)
	local spwn=arc_container_menu(get_hud())
	level.start_stop_menu(spwn,true)
end

function arc_container_menu:DrawArtButton(art_index, button_number, multi)
	local b, btns, bp, s, x, y, m, n, t, tx, ty, rd, w
	if multi then
		btns = self.put_buttons
		s = "put"
		n = art_index
		bp = self.btn_pos
	else
		btns = self.take_buttons
		s = "take"
		n = button_number
		bp = n
	end
	
	-- resize for widescreen
	w = 50*kScreen
	m = menu_cfg[max_arts_in_container][s]
	x = m.x_start+(m.space*math.mod(bp-1,m.row_size))
	x = x + (50 - w)/2
	y = m.y_start+(m.space*math.floor((bp-1)/m.row_size))
	
	b = btns[button_number]
	if ((not b) or (not multi)) and (art_index>0) then
		if artefact_hunter.is_known_art( arc_arts.get_art_section(art_index) ) then
			rd = arc_arts.get_art_inv_rad(art_index)
			if rd == 0 then
				rd = arc_arts.get_art_belt_rad(art_index)
			end
			t = (rd>0 and "+" or "")..string.format("%d", 10000*rd)
		else
			rd, t = 0, "0"
		end
		tx, ty = arc_arts.get_art_texture(art_index)
		tx, ty = 50*tx, 50*ty
	end
	
	if not b then -- if first time
		btns[button_number] = CUIButton()
		b = btns[button_number]
		b:SetWindowName("btn_"..s.."_"..button_number)
		
		b:SetAutoDelete(true)
		b:InitTexture("ui\\ui_icon_equipment")
		b:SetOriginalRect(tx,ty,50,50)
		
		if rd and rd ~= 0 then
			b:SetText(t)
			if rd>0 then b:SetTextColor(255,238,153,26)
			else b:SetTextColor(255,0,255,0) end
		else b:SetText("") end
		b:SetFont(GetFontGraffiti22Russian())
		b:Init(x,y,w,50)
		b:SetStretchTexture(true)
		
		self:AttachChild(b)
		self:AddCallback(
			b:WindowName(), ui_events.BUTTON_CLICKED,
			arc_ui_container_menu['btn_'..s..'_art'], n
		)
		
		if multi then
			b.multi = CUIStatic()
			m = b.multi
			m:SetAutoDelete(true)
			m:SetText("x"..tostring(multi))
			m:Init(35*kScreen,35,0,0)
			b:AttachChild(m)
			m:Show(multi>1)
			b:Show(multi>0)
		else
			b:Show(art_index>0)
		end
	elseif multi~=nil then -- if updating put_buttons
		b:SetWndPos(x,y)
		b:Show(multi>0)
		m = b.multi
		m:SetText("x"..tostring(multi))
		m:Show(multi>1)
	elseif not multi then -- if updating take_buttons
		if art_index>0 then
			b:SetOriginalRect(tx,ty,50,50)
			if rd and rd ~= 0 then
				b:SetText(t)
				if rd>0 then b:SetTextColor(255,238,153,26)
				else b:SetTextColor(255,0,255,0) end
			else b:SetText("") end
		end
		b:SetWndPos(x,y)
		b:Show(art_index>0)
	end
end

function arc_container_menu:__init() super()
	_menu = self
	
	get_container_arts()
	get_inventory_arts()
	
	self.take_buttons = {}
	self.put_buttons = {}
	
	self:UpdateMenu()
	BlockUIDescr(true)
end

function arc_container_menu:UpdateMenu()
	self:DrawBackground()
	self:DrawButtons()
	self:DrawWeight()
end

function arc_container_menu:DrawBackground()
	local b = self.bkg
	if not b then
		-- sizes of window
		local xs, ys = 360, 758
		self:Init(10,10,xs,ys)
		self.bkg = CUIFrameWindow()
		b = self.bkg
		b:SetWindowName("background")
		b:SetAutoDelete(true)
		b:Init("ui_icons_PDA_dialog_frame",0,0,xs,ys)
		self:AttachChild(b)
	end
	
	local a = self.art_box
	if not a then
		self.art_box = CUIStatic()
		a = self.art_box
		a:SetWindowName("art_box")
		
		a:SetAutoDelete(true)
		a:InitTexture(menu_cfg[max_arts_in_container].texture)
		a:SetStretchTexture(true)
		
		a:Init(unpack(menu_cfg[max_arts_in_container].cont))
		
		self:AttachChild(a)
	else
		a:InitTexture(menu_cfg[max_arts_in_container].texture)
		a:Init(unpack(menu_cfg[max_arts_in_container].cont))
	end
end

function arc_container_menu:DrawWeight()
	local w = self.arts_weight
	if not w then
		self.arts_weight = CUIStatic()
		w = self.arts_weight
		w:SetWindowName("arts_weight")
		w:SetAutoDelete(true)
		w:SetTextColor(255,238,153,26)
		w:SetFont(GetFontLetterica18Russian())
		w:Init(100,90,320,20)
		self:AttachChild(w)
	end
	
	w:SetText(string.format("Вес артефактов: %.2f kg", self.wght_num))
end

function arc_container_menu:DrawButtons()
	self.btn_pos = 0
	self.wght_num = 0
	for i = 1, math.max(max_arts_in_container, #self.take_buttons) do
		self:DrawArtButton((container_arts[i] or 0),i)
		if (container_arts[i] or 0)>0 then
			self.wght_num = self.wght_num + arc_arts.get_art_weight(container_arts[i])
		end
	end
	
	self.btn_pos = 0
	for i = 1, arc_arts.get_cfg_arts_number() do
		if inventory_arts[i]>0 then
			self.btn_pos = self.btn_pos + 1
		end
		self:DrawArtButton(i,i,inventory_arts[i])
	end
	
	local q = self.btn_quit
	if not q then
		self.btn_quit = CUIButton()
		q = self.btn_quit
		q:SetWindowName("btn_quit")
		
		q:SetAutoDelete(true)
		
		q:SetText("Закрыть")
		q:SetTextColor(255,238,153,26)
		q:SetFont(GetFontGraffiti19Russian())
		q:Init(130,50,100,30)
		
		self:AttachChild(q)
		self:AddCallbackEx("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit)
	end
	
	local p = self.btn_prev
	if not p then
		self.btn_prev = CUIButton()
		p = self.btn_prev
		p:SetWindowName("btn_prev")
		
		p:SetAutoDelete(true)
		
		p:SetText("<<")
		p:SetTextColor(255,238,153,26)
		p:SetFont(GetFontGraffiti19Russian())
		p:Init(50,50,50,30)
		
		self:AttachChild(p)
		self:AddCallbackEx("btn_prev", ui_events.BUTTON_CLICKED, self.prev_container)
	end
	
	local n = self.btn_next
	if not n then
		self.btn_next = CUIButton()
		n = self.btn_next
		n:SetWindowName("btn_next")
		
		n:SetAutoDelete(true)
		
		n:SetText(">>")
		n:SetTextColor(255,238,153,26)
		n:SetFont(GetFontGraffiti19Russian())
		n:Init(250,50,50,30)
		
		self:AttachChild(n)
		self:AddCallbackEx("btn_next", ui_events.BUTTON_CLICKED, self.next_container)
	end
  
	local f = (arc_containers.get_inv_containers_number()>1)
	p:Show(f)
	n:Show(f)
end

function arc_container_menu:on_quit()
	arc_containers.respawn_container(cur_cont_index)
	self:ClearCallbacks()
	self:GetHolder():start_stop_menu(self,true)
	arc_containers.set_menu_showed(false)
	BlockUIDescr(false)
end

function arc_container_menu:OnKeyboard(dik, keyboard_action)
	CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		if dik == DIK_keys.DIK_ESCAPE then
			self:on_quit()
		end
	end
	return true
end

function arc_container_menu:__finalize() end

function btn_put_art(art_index)
	if (arts_cont < max_arts_in_container) and (inventory_arts[art_index]>0) then
		local k_rad = arc_containers.get_container_protection(cur_cont_index)
		for i=1,max_arts_in_container do
			if container_arts[i]==0 then
				container_arts[i]=art_index
				arts_cont = arts_cont + 1
				
				-- remove artefact
				arc.remove_item(arc_arts.get_art_section(art_index))
				
				arc_arts.register_artefact(arc_arts.get_art_section(art_index),1,true)
				
				if k_rad then
					local inv_rad = arc_arts.get_inv_rad_sect(arc_arts.get_art_section(art_index))
					if inv_rad > k_rad then
						arc_radiation.change_inv_radiation(inv_rad-k_rad)
						amk.send_tip("Этот контейнер предназначен для менее радиоактивных артефактов. Вы не сможете с его помощью полностью нейтрализовать воздействие радиации.",nil,nil,5,"nano")
					end
				end
				
				inventory_arts[art_index]=inventory_arts[art_index]-1
				if inventory_arts[art_index]==0 then
					arts_inv = arts_inv - 1
				end
				_menu:UpdateMenu()
				return
			end
		end
	end
end

function btn_take_art(slot)
	local a = container_arts[slot]
	if (a>0) then
		if inventory_arts[a]==0 then
			arts_inv = arts_inv + 1
		end
		inventory_arts[a]=inventory_arts[a]+1
		
		container_arts[slot]=0
		arts_cont = arts_cont - 1
		
		_menu:UpdateMenu()
		
		-- create artefact
		arc.give_item(arc_arts.get_art_section(a))
		
		arc_arts.register_artefact(arc_arts.get_art_section(a),-1,true)
		
		local k_rad = arc_containers.get_container_protection(cur_cont_index)
		if k_rad then
			local inv_rad = arc_arts.get_inv_rad_sect(arc_arts.get_art_section(a))
			if inv_rad > k_rad then
				arc_radiation.change_inv_radiation(-(inv_rad-k_rad))
			end
		end
	end
end

function get_container_arts()
	container_arts = arc_containers.get_inv_container_arts(cur_cont_index)
	
	arts_cont = 0
	table.foreachi(container_arts,
		function(i,v)
			if v>0 then arts_cont = arts_cont+1 end
		end
	)
end

function get_inventory_arts()
	inventory_arts = {}
	arts_inv = 0
	
	local t
	for i=1, arc_arts.get_cfg_arts_number() do
		t = arc_arts.get_inv_arts_number(i)
		
		table.insert(inventory_arts, t)
		
		if t>0 then
			arts_inv = arts_inv + 1
		end
	end
end

function arc_container_menu:next_container()
	arc_containers.respawn_container(cur_cont_index)
	cur_cont_index = arc.to_interval(cur_cont_index+1,1,arc_containers.get_inv_containers_number())
	get_container_arts()
	max_arts_in_container = arc_containers.get_container_slots(cur_cont_index)
	arc_containers.remove_container(cur_cont_index)
	self:UpdateMenu()
end

function arc_container_menu:prev_container()
	arc_containers.respawn_container(cur_cont_index)
	cur_cont_index = arc.to_interval(cur_cont_index-1,1,arc_containers.get_inv_containers_number())
	get_container_arts()
	max_arts_in_container = arc_containers.get_container_slots(cur_cont_index)
	arc_containers.remove_container(cur_cont_index)
	self:UpdateMenu()
end
