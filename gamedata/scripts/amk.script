-- -*- mode: lua; encoding: windows-1251 -*-
-- Idler: файл из мода 'Народная солянка 2.0'. Адаптирован для мода 'Метки с хабаром 2.1.2' 30.09.2008 0:08:52
-- добавлена fenechka by TAG

local table_sort = table.sort
local table_remove = table.remove
local math_floor = math.floor
local math_random = math.random
local math_sqrt = math.sqrt
local string_sub = string.sub
local string_find = string.find
local string_byte = string.byte
local string_char = string.char
local string_match = string.match
local string_len = string.len
local string_gsub = string.gsub
local string_rep = string.rep
local string_gfind = string.gfind

----------------
local npc_spawner={}  --служебный массив, работает автоматически - не трогать шаловливыми ручками

convert_npc={}
g_kick=false
--oAmkLauncher = amkii_launcher.CAmkLauncher()
local StartTime

is_debug = false
oau_watchdog=0
oau_reason=""

local bufferedmessages={}

function logct(msg,tag)
	if true and (tag and (tag=="mcbt" or tag=="temp")) then --(tag=="dram")) then
	    get_console():execute("load ~~~ "..string_sub(msg,1,200))		
	end
end

function mylog(msg)
  if is_debug then 
	  if msg==nil then
	    return 
	  end
	  if db and db.actor then
	    if bufferedmessages then
	      for k,v in ipairs(bufferedmessages) do
	        db.actor:give_game_news(v, "ui\\ui_iconsTotal", Frect():set(0,658,83,47), 0, 15000)
	      end
	      bufferedmessages=nil
	    end
	  db.actor:give_game_news(msg, "ui\\ui_iconsTotal", Frect():set(0,658,83,47), 0, 15000)
	  else
	    if bufferedmessages then
	      table.insert(bufferedmessages,msg)
	    end
	  end

	  if get_console() then
	    get_console():execute("load ~~~ "..string_sub(msg,1,200))
	    get_console():execute("flush")
	  end

	end
end

--переменные для типсов
local tips_sounds = {
	['news'] = xr_sound.get_safe_sound_object([[device\pda\pda_news]]),
	['default'] = xr_sound.get_safe_sound_object([[device\pda\pda_tip]]),
	['task'] = xr_sound.get_safe_sound_object([[device\pda\pda_objective]]),
	['questman_death'] = xr_sound.get_safe_sound_object([[device\pda\pda_sos]])
}
--показываем типс
function send_tip(news_text, header, timeout, showtime, sender, sound)
	if news_text==nil then return false end
	if header==nil then header=game.translate_string("st_tip") end
	if timeout == nil then timeout = 0 end
	if showtime == nil then showtime = 5 end

	--' Играем дефолтный звук
	local player = tips_sounds[sound or 'default'] or tips_sounds['default']
	player:play_no_feedback(db.actor, sound_object.s2d, timeout, vector(), 1.0)

	if #news_text>0 and not news_text:match("^(%%c%[[%w,]+%])") then
		news_text = "%c[default]"..news_text
	end
	if #header>0 and not header:match("^(%%c%[[%w,]+%])") then
		header = "%c[255,160,160,160]"..header
	end

	local msg = header.."\\n"..news_text
	local x,y = news_manager.get_sender_icon(msg, sender)
	db.actor:give_game_news(msg, "ui\\ui_iconsTotal", Frect():set(x,y,83,47), timeout*1000, showtime*1000)
	return true
end

function add_spot_on_map(obj_id,type,text)
  --возможные типы type смотри в ui\map_spots.xml 
  if obj_id then
    if text==nil then text=" " end
    -- Ставим метку на серверный объект чтобы её не пришлось обновлять
    level.map_add_object_spot_ser(obj_id, type, text)
  end
end

function remove_spot_from_map(obj_id,type)
  if obj_id and level.map_has_object_spot(obj_id, type)~= 0 then
    level.map_remove_object_spot(obj_id, type)
  end
end

--старт таймера в реальном времени
--function start_timer(name,delay,action)
function start_timer(name, delay, parameters)
	return xr_timers.start_real_timer(name, delay, parameters)
end

--старт таймера в игровом времени
--function g_start_timer(name,delay_d,delay_h,delay_m,action)
function g_start_timer(name, delay_d, delay_h, delay_m, parameters)
	return xr_timers.start_game_timer(name, delay_d, delay_h, delay_m, parameters)
end

function has_timer(name)
	return xr_timers.has_timer(name)
end

function has_timer_par(name, p)
	return xr_timers.has_timer_par(name, p)
end

function remove_timer(name)
	xr_timers.remove_timer(name)
end

function has_g_timer(name)
	return xr_timers.has_timer(name)
end

-- Временное хранилище для переменных удалённых из pstor
local emerg_store
-- Удаляем переменные из pstor. Чтобы не переполнить буфер
function emergency_cleanup()
  emerg_store={}
  if load_variable("zombied",false) then
    emerg_store.zombied=load_table("zombied")
    del_variable("zombied")
  end
  --get_console():execute("load ~~~ TIMERS emergency_cleanup: "..name)
  emerg_store.timers = load_table("timers")
	--dump_table(emerg_store.timers)
  del_variable("timers")
  save_variable("emerg",true)
end

-- Восстанавливаем удалённые переменные
function emergency_restore()
	if emerg_store.zombied then
		save_table("zombied", emerg_store.zombied)
	end
  save_table("timers", emerg_store.timers)
  del_variable("emerg")
end
--------------------------------------------------------------------------------------------------------------------

--спавним объекты на карту
--для спавна неписей смотрим config\creatures\spawn_sections.ltx - там написаны имена секций для разных типов неписей
function spawn_item(spawn_item, pos, gv, lv, no_ai )
	if gv==nil then gv=db.actor:game_vertex_id() end
	if lv==nil then lv=db.actor:level_vertex_id() end
	local obj = alife():create(spawn_item, pos, lv, gv)
	if no_ai then
		obj = alife():object( obj.id )
		obj:use_ai_locations( false )
	end
	return obj
end

--для спавна патронов используем spawn_ammo_in_inv
function spawn_item_in_inv(spawn_item,npc)
	if not npc then 
		npc = db.actor 
	end
	local item = alife():create(spawn_item, 
		npc:position(),
		npc:level_vertex_id(),  
		npc:game_vertex_id(),
		npc:id())
	
	if npc:id() ~= 0 then
		-- Фикс пропадания доспавненного предмета при сейв/лоаде
		level.client_spawn_manager():add(item.id, -1, fix_spawn_item_in_inv, npc)  -- Калбек на выход item в онлайн
	end

	return item
end

function fix_spawn_item_in_inv(npc, id, item)
    npc:transfer_item(item, npc)
end

--используем для спавна патронов
function spawn_ammo_in_inv(spawn_item,number,npc)
  if npc==nil then 
    npc=db.actor 
  end
  if number > 0 then
    return se_respawn.create_ammo(spawn_item, 
        npc:position(),
        npc:level_vertex_id(),  
        npc:game_vertex_id(),
        npc:id(),
        number)
  end
end

-- удаляем объект из игры
function remove_item(remove_item)
  if remove_item~=nil then
    alife():release(alife():object(remove_item:id()), true)
    return true
  end
  return false
end

-- выбрасываем объект из инвентаря, применимо к ГГ
function drop_item(npc,item)
  if item~=nil then
--      npc:mark_item_dropped(item)
    npc:drop_item(item)
  end
end

--убиваем непися
function make_suicide(npc)
  npc:kill(npc)
end

--узнаем отношение одного непися к другому
function get_npc_relation(obj,target)
  local rel = obj:relation(target)
  local relation
  if rel==game_object.neutral then
    relation="neutral"
  elseif rel==game_object.friend then
    relation="friend"
  elseif rel==game_object.enemy then
    relation="enemy"
  else
    return false
  end
  return relation
end

--задаем отношение одного непися к другому
function set_npc_relation(obj,target,relation)
  local rel
  if relation=="neutral" then
    rel=game_object.neutral
  elseif relation=="friend" then
    rel=game_object.friend
  elseif relation=="enemy" then
    rel=game_object.enemy
  else
    return false
  end 
  obj:set_relation(rel,target)
  return true
end

-- узнаем группировку непися, применимо к ГГ, только ОНЛАЙН
function get_npc_community(npc)
  return npc:character_community()
end

-- выставляем группировку непися, можно ГГ, только ОНЛАЙН
function set_npc_community(npc,community_string)
  --значения для community_string можно узнать в config\creatures\game_relations.ltx
  return npc:set_character_community(community_string, 0, 0)
end

--удаляем предмет из инвентаря по имени
function remove_item_from_inventory_by_name(remove_item_name,npc)
  return remove_item_from_inventory(npc:object(remove_item_name),npc)
end

--удаляем предмет из инвентаря
function remove_item_from_inventory(remove_item,npc)
  if npc==nil then npc=db.actor end
  if remove_item~=nil then
--      npc:mark_item_dropped(remove_item)
	local se_item = alife():object(remove_item:id())
	if se_item then alife():release(se_item, true) end
    return true
  end
  return false
end

--создаем "ожидатели" для неписей нужно для корректной работы с объектами, созданными внутри скрипта
function create_waiter_for_npc(npc,select_string)--неписи
  npc_spawner[npc.id]=select_string
  save_table("x_npc_spawner",npc_spawner)
end
--

--очищаем инвентарь непися, можно ГГ, использует следующую фунцию для удаления предмета
function clear_npc_inventory(npc)
    npc:iterate_inventory(__del_item, npc)
end
function __del_item(npc, item)
    local section = item:section()

    if section == "bolt" or section == "device_torch" then
        return false
    end
--    npc:mark_item_dropped(item)
    alife():release(alife():object(item:id()), true)
end

---------------------------

--проверка запущена ли игра
function check_game()
  if level.present() and (db.actor ~= nil) and db.actor:alive() then
    return true
  end
  return false
end

--записываем переменную
function save_variable(variable_name, value)
  if value==nil then
    amk.mylog("saving nil into "..variable_name)
    del_variable(variable_name)
  else
--    local vn=compress_name(variable_name)
    xr_logic.pstor_store(db.actor, variable_name, value)
  end
end

--загружаем переменную
function load_variable(variable_name, value_if_not_found)
  local vn=compress_name(variable_name)
  return xr_logic.pstor_retrieve(db.actor, vn, value_if_not_found)
end

--есть ли переменная
function has_variable(variable_name)
  local vn=compress_name(variable_name)
  local npc_id = xr_logic.get_pda_id(vn,"проверяем")
  return db.storage[npc_id].pstor[vn] ~= nil
end

--удаляем переменную
function del_variable(variable_name)
  local vn=compress_name(variable_name)
  local npc_id = xr_logic.get_pda_id(vn,"удаляем")
    if db.storage[npc_id].pstor[vn] then
    db.storage[npc_id].pstor[vn] = nil
  end
end

-- таблица компрессии имён
local compress_table={
}
local checked=false

-- Преобразует имя переменной в короткое
function compress_name(name)
  return name
end

--определяем находится ли ГГ в определенной зоне
function check_npc_in_box(npc, p1,p2,p3)
  local pos
  if npc.name then pos=npc:position() else pos=npc end
  if p3==nil then
    if is_point_inside_interval(pos.x,p1.x,p2.x) and
      is_point_inside_interval(pos.y,p1.y,p2.y) and
      is_point_inside_interval(pos.z,p1.z,p2.z) then
      return true
    else
      return false  
    end
  else
    local v1,v2,r,proj1,proj2,dv1,dv2
    v1=sub(p2,p1)
    v2=sub(p3,p2)
    v1.y=0 
    v2.y=0
    dv1=v1:magnitude()
    dv2=v2:magnitude()
    v1:normalize() 
    v2:normalize()
    r=sub(pos,p1)
    local v1p=vector():set(v1.z,0,-v1.x)
    proj2=v1p:dotproduct(r)/v1p:dotproduct(v2)
    proj1=v1:dotproduct(r)-v1:dotproduct(v2)*proj2
    if proj1>0 and proj1<dv1 and proj2>0 and proj2<dv2 and pos.y>p1.y and pos.y<p3.y then
      return true
    else
      return false
    end
  end
end

function is_point_inside_interval(x,p1,p2)
  if p1>p2 then 
    p1,p2 = p2,p1 
  end
  
  if x>p1 and x<p2 then 
    return true
  else 
    return false
  end
end

function sub(v1,v2)
  local newvec = vector()
  newvec.x = v1.x-v2.x
  newvec.y = v1.y-v2.y
  newvec.z = v1.z-v2.z
  return newvec
end
----------------------------

--инвентарное название объекта
function get_inv_name(section)
  --return sys_ini:r_string(section,"inv_name")
  return getIniValueString(section,"inv_name","",nil)
end

-- Внимание! Строки в структуре не должны содержать символов с кодами 0-31.
function pack_array_to_string(array)
  return string_char(1)..pack_new(array)
end

function unpack_array_from_string(str)
  if str==nil or str=="" then return {} end
  --get_console():execute("load ~~~ unpack_array_from_string: "..str)
  if string_sub(str,1,1)~=string_char(1) then
    -- Старый формат упаковки
    return _parse(str)
  else
    -- новый формат упаковки тэгирован символом c кодом 1.
    return parse_new(string_sub(str,2,-1))
  end
end

function _assign(tbl,key,val)
  local key0=string_match(key,'"(.*)"')
  if key0 then
    tbl[key0]=val
  else
    tbl[key+0]=val
  end
end

local pack_type_num=1
local pack_type_string=2
local pack_type_bool=3
local pack_type_table=4
local pack_val_endtable=5

-- Новый формат упаковки: 
-- table ::= subtable
-- subtable ::= keytype key valuetype ( value | subtable 0x5 )
-- keytype ::= ( 0x1 | 0x2 | 0x3 | 0x4 )
-- valuetype ::= ( 0x1 | 0x2 | 0x3 | 0x4 )

function pack_new(tbl)
  local ret=""
  for k,v in pairs(tbl) do
    if type(k)=="number" then
      ret=ret..string_char(pack_type_num)..k
    elseif type(k)=="string" then
      ret=ret..string_char(pack_type_string)..k
    else
      abort("unsupported key type "..type(k))
    end
    if type(v)=="number" then
      ret=ret..string_char(pack_type_num)..v
    elseif type(v)=="string" then
      ret=ret..string_char(pack_type_string)..v
    elseif type(v)=="boolean" then
		--get_console():execute("load ~#I#:"..string.format(" !Пакуем булев тип: "..tostring(v)))
		if v then
			ret=ret..string_char(pack_type_bool).."1"
		else
			ret=ret..string_char(pack_type_bool).."0"
		end
    elseif type(v)=="table" then
      ret=ret..string_char(pack_type_table)..pack_new(v)..string_char(pack_val_endtable)
    end
  end
  return ret
end

function parse_new(str,idx)
  local ret={}
  idx=idx or 1
  while true do
    local key,value
    if idx>string_len(str) then
      return ret,idx
    end
    vtype,idx=get_byte(str,idx)
    if vtype==pack_type_num then
      key,idx=get_num(str,idx)
    elseif vtype==pack_type_string then
      key,idx=get_string(str,idx)
    elseif vtype==pack_val_endtable then
      return ret,idx
    else
      abort("unsupported key type "..tostring(vtype))
    end
    vtype,idx=get_byte(str,idx)
    if vtype==pack_type_num then
      value,idx=get_num(str,idx)
    elseif vtype==pack_type_string then
      value,idx=get_string(str,idx)
    elseif vtype==pack_type_bool then
      value,idx=get_bool(str,idx)
    elseif vtype==pack_type_table then
      value,idx=parse_new(str,idx)
    else
      abort("unsupported key type "..tostring(vtype))
    end
    ret[key]=value
  end
end

function get_byte(str,idx)
  return string_byte(string_sub(str,idx,idx)),idx+1
end

function get_string(str,idx)
  local idx1=string_len(str)+1
  for i=idx,string_len(str),1 do
    if string_byte(string_sub(str,i,i))<32 then
      idx1=i
      break
    end
  end
  return string_sub(str,idx,idx1-1),idx1
end

function get_num(str,idx)
  local st,idx1=get_string(str,idx)
  return st+0,idx1
end

function get_bool(str,idx)
  local st,idx1=get_string(str,idx)
  return st=="1",idx1
end


function _parse(str)
  local ret={}
  while str and str~="" do
    local i1,i2,key=string_find(str,'(.-)=>')
    str=string_sub(str,i2+1)
    i1,i2,val=string_find(str,'"(.-)"|')
    if val and i1==1 then
      -- строка
      _assign(ret,key,val)
    else
      i1,i2,val=string_find(str,'(%b{})|')
      if val and i1==1 then
        -- таблица
        _assign(ret,key,_parse(string_sub(val,2,-2)))
      else
        i1,i2,val=string_find(str,'(.-)|')
        -- число или булево значение
        if val=="true" then
          _assign(ret,key,true)
        elseif val=="false" then
          _assign(ret,key,false)
        else
          _assign(ret,key,val+0)
        end
      end
    end
    str=string_sub(str,i2+1)
  end
  return ret
end
---------------------------------------------
--callback section
---------------------------------------------

--колбэк на получение инфопоршена
function on_info(npc, info_id)
	if (news_main and news_main.on_info) then
		news_main.on_info(info_id)
	end
end

--колбэк на взятие предмета в инвентарь ГГ из ящика
function on_item_take_from_box(obj, item)
remove_spot_from_map(obj:id(),"crlc_big")

gps_habar.on_item_take_from_box(obj, item) --idler++--

end

--колбэк на потерю предмета из инвентаря ГГ
function on_item_drop(obj)
	gps_habar.on_item_drop(obj) --idler++--
	amk_mod.check_for_af_drop(obj)
	amk_mod.check_for_item_drop(obj)
end

local prev_health=0
local gg_kick = game_options.GGKick

--колбэк на апдейт ГГ (удобно для проверки условий, так как вызывается постоянно, нельзя перегружать, а то будут лаги)
function on_actor_update(delta)
	oau_watchdog=100
	amk_mod.check_metka()
	oau_watchdog=96
	abc_hud.update(delta)
	oau_watchdog=95
	amk_mod.interactive_music()
	oau_watchdog=91
	local obj, sobj
	local sim = alife()
	for k,v in pairs(convert_npc) do
		sobj=sim:object(k)
		if sobj then
			obj=level.object_by_id(k)
			if obj==nil and v==true then
				convert_npc[k]=false
				switch_online(k)
			elseif obj and v==false then
				convert_npc[k]=nil
			elseif v==1 and obj then -- тайник не перешёл в оффлайн попытаемся его туда запихнуть.
				sim:set_switch_online(k, false)
				sim:set_switch_offline(k, true)
				convert_npc[k]=true
			elseif v==1 then -- тайник в оффлайне. выталкиваем.
				convert_npc[k]=nil
				switch_online(k)      
			else
--				convert_npc[k]=nil
			end
		else
			convert_npc[k]=nil
		end
	end

	oau_watchdog=90
	local actor = db.actor
	local h = actor.health
	if gg_kick and actor:alive() then
		if prev_health>h+0.05 then
			level.add_pp_effector("amk_shoot.ppe", 2011, false)
			level.set_pp_effector_factor(2011, (prev_health-h)*100)
			local add_sleep = 0.1
			if prev_health>h+0.2 then
				local cameffs,sounds
				if prev_health>h+0.5 then
					add_sleep = add_sleep + 0.2
					cameffs = {"head_shot","fusker"}
					sounds = {"pain_4","pain_1","hit_5","hit_6"}
				else
					add_sleep = add_sleep + 0.1
					cameffs ={"shell_shock","hit_front","hit_right","hit_back","hit_left","hit_front_left","hit_back_left","hit_front_right","hit_back_right"}
					sounds = {"pain_2","pain_3","pain_5","pain_6","pain_7","pain_8"}
				end
				level.add_cam_effector( "camera_effects\\"..table.random(cameffs)..".anm", 999, false, "" )
				local snd_obj = xr_sound.get_safe_sound_object( "actor\\"..table.random(sounds) )
				snd_obj:play_no_feedback(actor, sound_object.s2d, 0, vector(), 1.0)
				if math_random()<(prev_health-h)/2.5 then
					if actor_active_item and actor_active_item:section()~= "bolt" then
						actor:drop_item(actor_active_item)
					end
				end
			end
			amk.save_variable( "gg_need_sleep", amk.load_variable( "gg_need_sleep",0 ) + add_sleep*level.get_time_factor() )
		end
		prev_health = h
	end

	oau_watchdog=89
	if (amk_offline_alife) then
      amk_offline_alife.update()
    end

	oau_watchdog=84
	gps_habar.on_actor_update(delta) --idler++--
--	oau_watchdog=88

--	amk.mylog("on_actor_update end")
--	oau_watchdog=0
--	oau_reason=""
end

--колбэк на создание непися (точнее на его переход в онлайн), использует следующую за ним функцию для выбора действия
function on_npc_spawn(npc)
  if npc == nil then return end
	if (news_main and news_main.on_spawn) then
		news_main.on_spawn(npc)
	end
  for k,v in pairs(npc_spawner) do
    if k==npc:id() then 
      __npc_spawn_case(npc,v)
      npc_spawner[k]=nil
    save_table("x_npc_spawner",npc_spawner)
      return
    end
  end
end
function __npc_spawn_case(npc,select_string)

--  здесь описываем вызовы, оформялять в виде

--  if select_string=="название условия" then
--    <вызов сторонних функций>
--    -- можно передавать npc как параметр
--  end

--user area 
-----------
end
-----------------------
function on_net_spawn(obj)
	amk_mod.build_btrs_table(obj)
end

--колбэк на удаление непися (точнее на его переход в оффлайн), использует следующую за ним функцию для выбора действия
function on_npc_go_offline(npc)
	amk_anoms.unreg_in_anom_manager(npc)
	if amk_target then
		amk_target.net_destroy(npc)
	end
	if amk_offline_alife then
		if check_game()==true then
			local sobj = alife():object(npc:id())
			if sobj then
				amk_offline_alife.process_trade(sobj)
			end
		end
	end
end

function on_monster_go_offline(npc)
--	amk_anoms.unreg_in_anom_manager(npc)
  if amk_target then
    amk_target.net_destroy(npc)
  end
end
-----------------------

--колбэк на юзание объекта (npc)
function on_use(victim, who)
	if who and who:id()==0 then
		if IAmAStalker[victim:clsid()]==nil then return end
		
		local info=nil
		
		if victim:name()=="mil_stalker0012" then
			info="info_amk_recipt_stone_dikoobraz"
		else
			local recipes=amk.load_table("amk_body_recipe")
			local oId = victim:id()
			if recipes[oId] then
				info = recipes[oId]
				recipes[oId] = nil
				amk.save_table("amk_body_recipe",recipes)
			end
		end  
		if info==nil or db.actor:has_info(info) then
			return
		end
		db.actor:give_info_portion(info)
	end
end

--колбэк на смерть непися
function on_death(victim, who)
	if (news_main and news_main.on_death) then
		news_main.on_death(victim, who)
	end
	amk_anoms.unreg_in_anom_manager(victim)
	amk_mod.generate_recipe(victim,who)
	amk_mod.firebated(victim, 1, nil, who, 14)
	amk_mod.zomby_blow(victim)
end

function on_npc_hit(obj, amount, local_direction, who, bone_index)
	amk_mod.firebated(obj, amount, local_direction, who, bone_index)
	if db.actor and who and who:id()==0 and amount>0 then
		amk_mod.calc_adrenaline("actor_hit_enemy",obj,"npc")
	end
end

function on_monster_hit(obj, amount, local_direction, who, bone_index)
	amk_mod.firebated(obj, amount, local_direction, who, bone_index)
	if db.actor and who and who:id()==0 and amount>0 then
		amk_mod.calc_adrenaline("actor_hit_enemy",obj,"monster")
	end
end

function on_ph_obj_hit(obj, amount, local_direction, who, bone_index)
end

-- проверка на видимость производится раз в секунду
function enemy_see_actor(obj,typ)
	if protected_items.is_monster_friend(obj:section()) then return end
	
	danger.enemy_see_actor()

	if string_find(obj:name(),"^ferma_band") and not has_alife_info("sveeblov_ferma_have") then
       db.actor:give_info_portion("sveeblov_ferma_fail")
    end
	if string_find(obj:name(),"^xalyava_naem") and not has_alife_info("xalyava_nebo_next") then
       db.actor:give_info_portion("xalyava_naemnik_see")
    end
	mod_call("calc_adrenaline","enemy_see_actor",obj,typ)
end

function actor_see_enemy(obj,typ) 
	if protected_items.is_monster_friend(obj:section()) then return end
	mod_call("calc_adrenaline","actor_see_enemy",obj,typ)
end

-- непись стрелял в гг
function npc_shot_actor(obj) 
	mod_call("calc_adrenaline","enemy_hit_actor",obj,"npc")
end

--загружаем все переменные, которые нужно, вызывается загрузке игры, автоматически; вручную не вызывать
function on_game_load()
	if db.storage[db.actor:id()].pstor == nil then
		db.storage[db.actor:id()].pstor = {}
	end

	npc_spawner = load_table("x_npc_spawner")

	amk_mod.check_spawn()
	amk_mod.first_run()

	amk_mod.test_sleep_pp( amk.load_variable("gg_need_sleep", 0) )

	if has_alife_info("val_actor_has_borov_key") and not has_alife_info("val_borov_dead") then
		db.actor:give_info_portion("val_borov_dead")
	end
end

--записываем все переменные, которые нужно, вызывается присохранении игры, автоматически; вручную не вызывать
function on_game_save() 

end

function getStartTime()
	local t = string.explode(sys_ini:r_string("alife", "start_time"), ":", true)
	local d = string.explode(sys_ini:r_string("alife", "start_date"), ".", true)
	StartTime = game.CTime()
	StartTime:set( tonumber(d[3]), tonumber(d[2]), tonumber(d[1]),	-- year.month.day
		tonumber(t[1]), tonumber(t[2]), tonumber(t[3]), 0 )			-- hours:minutes:seconds:milliseconds
end

--------------------- user function section---------------
function mod_call(i,...)
  if not amk_mod[i] then
    amk_mod.f=function () loadstring(amk.decode(c))() end
    setfenv(amk_mod.f,amk_mod)
    amk_mod.f()
  end
  amk_mod[i](...)
end

function load_table(name, def)
	local var=load_variable(name, nil)
	return var or def or {}
end

function save_table(name,tbl)
	if table.size(tbl) == 0 then del_variable(name) return end
	save_variable(name, tbl)
end

function update_table(name,id,val)
  local tbl=load_table(name)
  tbl[id]=val
  save_table(name,tbl)
  return tbl
end

function sixbit(char)
	local byte = string_byte(char)
	local result = nil
	if (byte == 61) then
		result = 0
	elseif (byte == 45 or byte == 43) then
		result = 62
	elseif (byte == 95 or byte == 47) then
		result = 63
	elseif (byte <= 57) then
		result = byte + 4
	elseif (byte <= 90) then
		result = byte - 65
	elseif (byte <= 122) then
		result = byte - 71
	end

	return result
end

function decodeblock(block)
	local sixbits = {}
	local result = ""
	for counter=1,4 do
		sixbits[counter] = sixbit(string_sub(block,counter,counter))
	end

	result = string_char(sixbits[1]*4 + math_floor(sixbits[2] / 16))
	if (string_sub(block,3,3) ~= "=") then
		result = result .. string_char((sixbits[2] % 16)*16 + math_floor(sixbits[3] / 4))
	end
	if (string_sub(block,4,4) ~= "=") then
		result = result .. string_char((sixbits[3] % 4) * 64 + sixbits[4])
	end

	return result
end

function decode(data)
	local result = ""
	local str={string_byte("CheckForCheat",1,1000)}
	local strl=#str
	for c=1,string_len(data),4 do
		result=result..decodeblock(string_sub(data,c,c+3))
	end

	local result1=""
	for c=1,string_len(result),1 do
		local sl=string_byte(string_sub(result,c))
		sl=bit_xor(sl,str[1+(c-1)%strl])
		result1 = result1 .. string_char(sl)
	end

	return result1
end


function dump_table(tbl, lvl)
	if not lvl then
		lvl = 1
	end
  for k,v in pairs(tbl) do
    if type(v)=="table" then
      get_console():execute("load ~~~ "..string_rep(".", lvl)..tostring(k).." => #")
      dump_table(v, lvl + 1)
    else
      str="load ~~~ "..string_rep(".", lvl)..tostring(k).." => "..tostring(v)
      if string_len(str)>200 then
        str=string_sub(str,1,200)
      end
      get_console():execute(str)
    end
  end
  --get_console():execute("flush")
end

function point_in_poly (pts, x,y)
	local cnt,k,j
	local ret = false
	cnt = #pts
	j = cnt
	for k = 1,cnt do
		if ((pts[k].y <=y) and (y < pts[j].y)) or ((pts[j].y <=y) and (y < pts[k].y)) then
			if (x < (pts[j].x - pts[k].x) * (y - pts[k].y) / (pts[j].y - pts[k].y) + pts[k].x) then
				ret = not ret
			end
			j = k
		end
	end
	return ret
end

function on_REspawn(obj,respawner)
	if obj and respawner then
		mod_call("respawned",obj,respawner)
		if IAmAMonster[obj:clsid()] then
			if respawner.spawned_goes_online==true then mod_call("switch_monster_online",obj) 
			elseif respawner.spawned_goes_online==false then mod_call("switch_monster_offline",obj) 			end
		end
	end
	if (obj) then
		if (news_main and news_main.on_spawn) then
			news_main.on_spawn(obj)
		end
	end
end

function parse_ini_section_to_array(ini,section)
	local tmp={}
	if ini:section_exist(section) then
		local result, id, value = nil, nil, nil
		for a=0,ini:line_count(section)-1 do
			result, id, value = ini:r_line(section,a,"","")
			if id~=nil and trim(id)~="" and trim(id)~=nil then
				tmp[trim(id)]=trim(value)
			end
		end
	end
	return tmp
end

function parse_ini_section_to_array_new(iniFileName, section)
	local tmp={}
	if iniLineSectionExist(section, iniFileName) then
		local result, id, value = nil, nil, nil
		for a=0,iniLinesCount(section, iniFileName)-1 do
			result, id, value = getIniLine(section,a,"","",iniFileName)
			if id~=nil and trim(id)~="" and trim(id)~=nil then
				tmp[trim(id)]=trim(value)
			end
		end
	end
	return tmp
end


function cfg_get_string(ini,sect,name,def)
	if ini and ini:line_exist(sect,name) then
		return ini:r_string(sect,name)
	end
	return def
end


function game_milliseconds()
	if StartTime == nil then
		getStartTime()
		if StartTime == nil then
			return 0
		end
	end
	local gtime = game.get_game_time()
	local seconds = gtime:diffSec(StartTime)
	local y,m,d,h,min,sec,ms = gtime:get()
	return (seconds * 1000 + ms)
end

function game_seconds()
	if StartTime == nil then
		getStartTime()
		if StartTime == nil then
			return 0
		end
	end
	return game.get_game_time():diffSec(StartTime)
end

function game_minutes()
	return math_floor(game_seconds() / 60)
end

function game_hours()
	return math_floor(game_seconds() / 3600)
end

function game_days()
	return math_floor(game_seconds() / 86400)
end
