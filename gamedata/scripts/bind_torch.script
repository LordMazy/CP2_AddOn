-- -*- mode: lua; encoding: windows-1251 -*-
local get_seconds = amk.game_seconds

local devices = {}

local need_init = true

local good_charge = 0.87

-- battery charge level = {settings}
local torch_settings = {
	[1] = {
		range = 30,
		color = {1.0, 1.0, 1.0, 0.2},
		omni_range = 0.3,
		omni_color = {0.60, 0.60, 0.10, 0},
		color_animator = "empty",
		glow_radius = 1.5,
		spot_angle = 90
	},
	[0.6] = {
		range = 25,
		color = {0.9, 0.9, 0.9, 0.2},
		omni_range = 0.27,
		omni_color = {0.55, 0.60, 0.10, 0},
		color_animator = "empty",
		glow_radius = 1.4,
		spot_angle = 84
	},
	[0.4] = {
		range = 20,
		color = {0.8, 0.8, 0.8, 0.2},
		omni_range = 0.25,
		omni_color = {0.50, 0.55, 0.10, 0},
		color_animator = "empty",
		glow_radius = 1.3,
		spot_angle = 78
	},
	[0.25] = {
		range = 17,
		color = {0.5, 0.5, 0.5, 0.1},
		omni_range = 0.21,
		omni_color = {0.30, 0.30, 0.05, 0},
		color_animator = "empty",
		glow_radius = 1.0,
		spot_angle = 70
	},
	[0.1] = {
		range = 15,
		color = {0.5, 0.5, 0.5, 0.1},
		omni_range = 0.2,
		omni_color = {0.30, 0.30, 0.05, 0},
		color_animator = "koster",
		glow_radius = 0.8,
		spot_angle = 65
	},
	[0] = {
		range = 0,
		color = {0, 0, 0, 0},
		omni_range = 0,
		omni_color = {0, 0, 0, 0},
		color_animator = "empty",
		glow_radius = 0,
		spot_angle = 0
	}
}
local torch_cond = nil
local upd_step = 30			-- update interval in game seconds

local function init_settings()
	need_init = false
	torch_cond = {}
	for k,v in pairs(torch_settings) do
		table.insert(torch_cond, k)
	end
	table.sort(torch_cond, function(i1, i2) return i1<i2 end)
end


class "torch_binder" (object_binder)

function torch_binder:__init(obj)
	super (obj)
	self.work_time = 0
	self.next_cond = 0
	self.mode = false
	self.last_time = 0
	devices[obj:id()] = self
end

function torch_binder:init_torch()
	if need_init then init_settings() end

	self.section = self.object:section()
	if self.section == "device_torch" then
		self.object:set_callback(callback.on_switch_torch, self.on_switch_torch, self)
		self.mode = self.object:is_torch_enabled()
	end

	self.max_time = sys_ini:r_u32(self.section, "work_time") *60

--	log1("torch_binder:init_torch: "..self.object:name())
	self.se_torch = alife():object(self.object:id())
--	log1("worked_time = "..self.se_torch.worked_time)
	self.work_time = self.max_time - self.se_torch.worked_time

	local cond = self.work_time/self.max_time
	if self.section == "device_torch" then
		for i, v in ipairs(torch_cond) do
			if cond <= v then
				self.next_cond = torch_cond[i-1] or -1
				if v < 1 then self:set_settings(v) end
				break
			end
		end
	else
		local pnv_off = has_alife_info("pnv_off")
		if cond > 0 then
			if pnv_off then db.actor:disable_info_portion("pnv_off") end
		else
			self.next_cond = -1
			if not pnv_off then db.actor:give_info_portion("pnv_off") end
		end
	end

	self.object:set_condition(cond)
	netpk:modify( self.se_torch, { condition = cond }, netpk.fState )

	self.last_time = get_seconds()

--	log1("init_torch, work_time = "..self.work_time)
end

function torch_binder:update(delta)
	object_binder.update(self, delta)
	
	if (not self.first_update) or self.force_init then
		self:init_torch()
		self.first_update = true
		self.force_init = nil
		return
	end

	if not db.actor:is_in_slot(self.object) then return end

	if not self.mode then return end

	local tm = get_seconds()
	local _shift = tm - self.last_time
	if _shift < upd_step then return end

	self.last_time = tm

	if self.next_cond < 0 then return end

	self.work_time = math.max(self.work_time - _shift, 0)
	local cond = self.work_time/self.max_time
	self.se_torch.worked_time = self.max_time - self.work_time

--	log1(cond.." : "..self.next_cond.." : "..self.se_torch.worked_time)

	self.object:set_condition(cond)
	netpk:modify( self.se_torch, { condition = cond }, netpk.fState )

	if self.section~="device_torch" then
		if cond == 0 then
			self.next_cond = -1
			if not has_alife_info("pnv_off") then
				db.actor:give_info_portion("pnv_off")
			end
		end
	elseif cond <= self.next_cond then
		for i, v in ipairs(torch_cond) do
			if cond <= v then
				self.next_cond = torch_cond[i-1] or -1
				if v < 1 then self:set_settings(v) end
				break
			end
		end
	end
end

function torch_binder:net_destroy()
	if self.section=="device_torch" then
		self.object:set_callback(callback.on_switch_torch, nil)
	end
	devices[self.object:id()] = nil
	object_binder.net_destroy(self)
end

function torch_binder:on_switch_torch(mode)
	self.mode = (mode == 1)
	if self.mode then self.last_time = get_seconds() end
end

function torch_binder:charge()
	self.se_torch.worked_time = 0
	self.work_time = self.max_time
	self.object:set_condition(1)
	netpk:modify( self.se_torch, { condition = 1 }, netpk.fState )
	self.last_time = get_seconds()

	if self.section~="device_torch" then
		if has_alife_info("pnv_off") then
			db.actor:disable_info_portion("pnv_off")
		end
		self.next_cond = 0
	else
		self.next_cond = torch_cond[#torch_cond-1]
		self:set_settings(1)
	end
end

function torch_binder:set_settings(condition)
	local t = torch_settings[condition]
	if not t then
		abort("torch_binder: condition [%s] not found in 'torch_settings'", tostring(condition))
		return
	end
--	log1("torch_binder:set_settings ["..tostring(condition).."]")
	local torch = self.object
	torch:set_torch_range(t.range)
	torch:set_torch_color( fcolor():set(unpack(t.color)) )
	torch:set_torch_omni_range(t.omni_range)
	torch:set_torch_omni_color( fcolor():set(unpack(t.omni_color)) )
	torch:set_torch_glow_radius(t.glow_radius)
	torch:set_torch_spot_angle(t.spot_angle)
	torch:set_torch_color_animator(t.color_animator)
--	log1("OK")
end
------------------------------------------------------------------------------
function init(obj)
    local new_binder = torch_binder(obj)
    obj:bind_object(new_binder)
end
-------------------------------------------------------------------------------
function switch_nv(id, mode)
	if devices[id] then
		devices[id]:on_switch_torch(mode)
	end
end

function force_init_nv(id)
	if devices[id] then
		devices[id].force_init = true
	end
end

function broke_torch()
	for k, v in pairs(devices) do
		if v.section == "device_torch"
			and v.object:parent() and v.object:parent():id() == 0
		then
			v.object:set_condition(0)
			netpk:modify( v.se_torch, { condition = 0 }, netpk.fState )
			v.next_cond = -1
			v.work_time = 0
			v.se_torch.worked_time = v.max_time
			v:set_settings(0)
			break
		end
	end
end

function charge(acumm, torch)
	if not devices[torch:id()] then return end

	if has_alife_info("no_pnv") then
		ui_inv_add.show_inv_msg("Невозможно заменить батарею: устройство неисправно")
	elseif torch:condition() > good_charge then
		ui_inv_add.show_inv_msg("Аккумулятор заряжен и не нуждается в замене")
	else
		devices[torch:id()]:charge()
		local se_obj = alife():object(acumm:id())
		if se_obj then alife():release(se_obj, true) end
		zvuki.use_snd("acumm")
	end
end
