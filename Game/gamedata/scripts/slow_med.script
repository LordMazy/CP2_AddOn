-- -*- mode: lua; encoding: windows-1251 -*-
local med_params = {
	health    = { offset = 220, func = "start_health"                     },
	power     = { offset = 224, func = "start_power"                      },
	radiation = { offset = 232, func = "change_radiation",  always = true }
}
local medkits = {}

function on_before_use_item( item )
	local section = item:section()
	local t = medkits[section]
	if t == nil then
		medkits[section] = {}
		t = medkits[section]
		local n = 0
		for k, v in pairs( med_params ) do
			n = sys_ini:r_float( section, "eat_"..k )
			if n ~= 0 then
				t[k] = n
			end
		end
		if table.size(t) == 0 then
			medkits[section] = false
		end
	end

	if not t then return end

	for k, v in pairs(t) do
		if ( med_params[k].always or game_options.SlowMed ) then
			item:set_inventory_item_float( nil, 0.0, med_params[k].offset )
			this[ med_params[k].func ]( v )
		end
	end
end
-----------------------------------------------------------------------------------------------
local add_health = nil
function start_health( val )
	if add_health == nil then
		xr_s.subscribe( "update", this.set_health )
	end
	add_health = ( add_health or 0 ) + val
end
function set_health( delta )
	if not add_health then return end

	local v = delta * 0.00002
	local dec = add_health < 0
	if dec then v = -v end
	add_health = add_health - v
	Actor.health = v

	if dec ~= (add_health < 0) then
		xr_s.unsubscribe( "update", this.set_health )
		add_health = nil
	end
end
-----------------------------------------------------------------------------------------------
local add_power = nil
function start_power( val )
	if add_power == nil then
		xr_s.subscribe( "update", this.set_power )
	end
	add_power = ( add_power or 0 ) + val
end
function set_power( delta )
	if not add_power then return end

	local v = delta * 0.00005
	local dec = add_power < 0
	if dec then v = -v end
	add_power = add_power - v
	Actor.power = v

	if dec ~= (add_power < 0) then
		xr_s.unsubscribe( "update", this.set_power )
		add_power = nil
	end
end
-----------------------------------------------------------------------------------------------
function change_radiation( v )
	arc_radiation.use_antirad( v )
end
-----------------------------------------------------------------------------------------------
function save()
	local t = {}
	if add_health ~= 0 then
		t.h = add_health
	end
	if add_power ~= 0 then
		t.p = add_power
	end
	amk.save_table( "slow_med", t )
end

function load()
	local t = amk.load_table( "slow_med" )
	if t.h then
		start_health( t.h )
	end
	if t.p then
		start_power( t.p )
	end
end

function attach()
	xr_s.subscribe( "pre_save",  this.save )
	xr_s.subscribe( "net_spawn", this.load )
end
