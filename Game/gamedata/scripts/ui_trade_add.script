-- -*- mode: lua; encoding: windows-1251 -*-
local wnd = nil
local wndX = { wide = 96, normal = 19 }

---------------------------------------------------------------------
class "TradeWnd" (CUIScriptWnd)

function TradeWnd:__init(owner) super()
	self.owner = owner
	self:InitControls()
	xr_s.subscribe( "trade_open", self.trade_open, {self = self} )
	xr_s.subscribe( "trade_close", self.trade_close, {self = self} )
end

function TradeWnd:InitControls()
	self:Init(0, 0, 1024, 768)
	self:Enable(true)
	self.owner:AttachChild(self)
	self:Show(true)
	
	local x = is_16_9_mode() and wndX.wide or wndX.normal
	
	self.wght = CUIStatic()
	self.wght:SetAutoDelete(true)
	self.wght:Init(x, 735, 400, 25)
	self.wght:SetFont(GetFontGraffiti22Russian())
	self.wght:SetTextComplexMode(true)
	self:AttachChild(self.wght)
	
	self.DescrWnd = ui_inv_descr.CUIDescriptionWnd(self)
end

function TradeWnd:trade_open()
	self:ShowWeight()
	xr_s.subscribe( "item_take", self.ShowWeight, {self = self} )
	xr_s.subscribe( "item_drop", self.ShowWeight, {self = self} )
	self.DescrWnd:subscribe()
end

function TradeWnd:trade_close()
	xr_s.unsubscribe( "item_take", self.ShowWeight )
	xr_s.unsubscribe( "item_drop", self.ShowWeight )
	self.DescrWnd:unsubscribe()
end

function TradeWnd:ShowWeight()
	local inv_weight = Actor:get_inventory_weight()
	local max_weight = Actor:get_actor_max_weight()
	if actor_outfit then
		max_weight = max_weight + actor_outfit:get_additional_inventory_weight2()
	end

	local max_weight_text = string.format("%.1f", max_weight)
	if #max_weight_text < 5 then
		max_weight_text = string.rep(" ", 5 - #max_weight_text)..max_weight_text
	end
	local text = (inv_weight<max_weight and "%c[255,238,155,23]" or "%c[255,255,0,0]")..
		string.format("%.1f", inv_weight)..
		" %c[255,238,155,23]/"..max_weight_text

	self.wght:SetText(text)
end

function TradeWnd:DetachWnd()
	self.DescrWnd:Remove()
	self.DescrWnd = nil
	self.owner:DetachChild(self)
	self.owner = nil
	xr_s.unsubscribe( "trade_open", self.trade_open )
	xr_s.unsubscribe( "trade_close", self.trade_close )
end

function on_net_spawn()
	wnd = TradeWnd( level.get_trade_wnd() )
end
function on_net_destroy()
	if wnd then
		wnd:DetachWnd()
		wnd = nil
	end
end

function attach()
	xr_s.subscribe("first_update", this.on_net_spawn)
	xr_s.subscribe("net_destroy", this.on_net_destroy)
end
