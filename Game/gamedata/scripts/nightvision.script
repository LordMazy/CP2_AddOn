-- -*- mode: lua; encoding: windows-1251 -*-
-- Съемные ПНВ
function load_pnv()
	local id = amk.load_variable("nv_on")
	if id then
		id = tonumber(id)
		if id == nil then amk.del_variable("nv_on") return end
		local obj = AI:object(id)
		if obj == nil or has_alife_info("no_pnv") then return end
		start_small_timer( 2000, function() bind_torch.switch_nv(id, true) end )
	end
end
function save_pnv()
	local nv = Actor:item_in_slot( inventory_slots.TORCH )
	if nv and nv:get_charge_level() > 0 then
		amk.save_variable( "nv_on", nv:id() )
	end
end

function switch_pnv()
	if level.main_input_receiver() then return end

	local nv = Actor:item_in_slot( inventory_slots.TORCH )
	if nv and nv:section() ~= "device_torch" then
		if has_alife_info("no_pnv") then
			bind_torch.switch_nv( nv:id(), false )
			return
		end
		bind_torch.switch_nv( nv:id() )
	end
end

-- отключение ПНВ при убирании из слота
function checking_droped_obj(obj)
	if obj:is_torch() then
		bind_torch.switch_nv( obj:id(), false )
	end
end

-- отключение ПНВ из поршня
function no_pnv()
	local obj = Actor:item_in_slot( inventory_slots.TORCH )
	if obj then
		bind_torch.switch_nv( obj:id(), false )
	end
end
--------------------------------------------------------------------------
function attach()
	xr_s.subscribe("item_drop", this.checking_droped_obj)
	xr_s.subscribe("item_to_ruck", this.checking_droped_obj)
	xr_s.subscribe("net_spawn", this.load_pnv)
	xr_s.subscribe("pre_save", this.save_pnv)
end
