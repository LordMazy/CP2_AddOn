-- -*- mode: lua; encoding: windows-1251 -*-

class "item_binder" (object_binder)

function item_binder:__init(item)
	super(item)
end

function item_binder:reinit()
	object_binder.reinit(self)

	local section = self.object:section()

	local str = sys_ini:r_string_ex(section, "quest_item_condlist", nil)
	if str then
		self.quest_item_condlist = xr_logic.parse_condlist(Actor, section, "quest_item_condlist", str)
	end

	str = sys_ini:r_string_ex(section, "can_take_condlist", nil)
	if str then
		self.can_take_condlist = xr_logic.parse_condlist(Actor, section, "can_take_condlist", str)
	end
end

function item_binder:net_spawn(obj)
	if not object_binder.net_spawn(self,obj) then return false end
	
	if self.quest_item_condlist then
		local res = xr_logic.pick_section_from_condlist(Actor, self.object, self.quest_item_condlist)
		self.object:set_inventory_item_flags(ii_flags.is_quest_item, res~=nil)
	end
	if self.can_take_condlist then
		local res = xr_logic.pick_section_from_condlist(Actor, self.object, self.can_take_condlist)
		start_small_timer(1000, self.set_can_take, self, res~=nil)
	end

	return true
end

function item_binder:set_can_take(val)
	if val == false and self.object:parent() ~= nil then
		self.object:parent():drop_item(self.object)
	end
	self.object:set_inventory_item_flags(ii_flags.can_take, val)
end
---------------------------------------------------------------------------------
function bind(item)
	item:bind_object( item_binder(item) )
end
